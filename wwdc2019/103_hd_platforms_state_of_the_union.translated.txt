[音楽]
 >>こんにちは、皆さん、こんにちは。
 Software Sebastien Marineau-Mesの副社長を迎えてください。
 【拍手】
 >>こんにちは、皆さん、そしてWWDCへようこそ。
朝の基調講演が大好きでしたか。
 【拍手】
そこに行きます。
 【拍手】
今年は開発者にとって最大の年の1つとなりました。現在取り組んでいることをお見せし、あなたの考えを見ていただけることをとても嬉しく思います。
今朝の基調講演は、今年何が起こっているのかの単なる味です。
私たちが共有したいことはまだたくさんあります。今日の午後は、開発者としてあなたにとって最も重要な分野に焦点を当てます。
もっと聞く準備ができていますか？
 【拍手】
そこに行きます。
今年は、新しいSwiftUIフレームワークとXcodeの優れたインタラクティブツールを使用して、今年の開発者エクスペリエンスの面で大きな一歩を踏み出しました。
そして私達は私達のプラットホームのそれぞれがそれらが最もよくすることでさらに深くなるのを本当に見ました。
私たちは、Mac用の強力な新しいプロ機能、および新しいダークモードと豊富なアップデートを持っています - すみません、watchOSのための独立性。
 iOSでは、新しいダークモードと素晴らしいアプリのアップデート。
そして最後に、iPadOSでは、今や自立している強力なオペレーティングシステムです。
すみません、モニターはここで動作していません。
 [ 笑い ]
そこに行きます。
そのうちの1つが動作しているので、私は左に行きます。
現在、これらのプラットフォームは多様なデバイスを表しており、AutoLayout、Size Classes、SwiftUIなどの多くのツールやAPIを選択することで、それらをサポートするのは簡単です。
これ以上レターボックスはありません。
アプリが幅広いデバイスサイズで正常に動作するとき、ユーザーは最高のエクスペリエンスを得られます。
そして来春から、さまざまな画面サイズに適応するUIを提供することがアプリストアの要件になります。
今tvOSはクールな新機能を提供しています -  [笑い]
 【拍手】
そこに行きます。
 【拍手】
現在tvOSは、サードパーティのアプリケーションのマルチユーザーサポート、新しいUI要素とオプション、SwiftUI、そしてもちろんXboxとPlayStationのゲームコントローラのサポートを含む、今年開発者のための素晴らしい新機能を提供しています。
 【拍手】
今朝、私たちは新しいMac Proを搭載した驚くべき新しいハードウェアプラットフォームを発表しました。
好きですか？
 【拍手】
それは信じられないことです、そしてそれは本当にアプリの驚くべき新しい種類のロックを解除します。
また、私たちはすべてのプラットフォームにまたがるテクノロジも構築しました。今日は、アクセシビリティ、プライバシー、機械学習、Siri、拡張現実、そして最後にMetalなど、これらの分野のいくつかを紹介します。
それでは、今日の午後、これら3つの大きな分野に焦点を当てたいと思います。開発者の生産性から始めましょう。
今すぐこの部屋の誰もが優れたツールが劇的にあなたの生産性を向上させることができることを知っています。
優れたツールを使用すると、クリエイティブになるまでの時間が長くなり、優れたアプリケーションを構築できます。
そしてその経験の基礎はプログラミング言語です。
過去5年間で、Swiftは成熟し、あらゆるAppleプラットフォームに組み込まれてきました。
そしてSwiftはSwiftUIの基盤を私たちに提供します。
そしてXcodeはコードデバッガ以上のものです - 申し訳ありませんが、コードエディタそしてデバッガです。
継続的な統合とテストのサポートなど、アプリを構築するために必要なものがすべて含まれています。
そしてそれはあなたが機械学習や拡張現実感などの新しい技術を探求することを可能にするツールをあなたに与えます。
そして最後に、私たちのプラットフォームの強力な基盤の上に構築されたSwiftUIフレームワークは、ユーザーインターフェースの構築方法に革命をもたらします。
そして、これら3つの要素が一体となってまったく新しいレベルの生産性を実現し、それらが根本的に、すべてのユーザーによるアプリの構築方法を変革します。
これで、SwiftUIに飛び込む準備はできましたか？
 【拍手】
それでは、Joshにお話を伺いましょう。
ジョシュ？
 【拍手】
 >>ありがとう、Sebastien。
さて、今朝見たようにSwiftUIはSwift for Swiftでゼロから構築されたまったく新しいユーザーインターフェースフレームワークです。
私たちは、あなたがより少ないコードを書くことを可能にし、あなたが書くコードがより良いコードになるようにしながら、あなたがすべてのアップルプラットフォームにわたってあなたがそのコードのより多くを使うようにします。
まず第一に、あなたが書いた個々の行にはたくさんの機能が組み込まれているので、もっと少ないコードで書くことになります。
それでは、今朝見たmacOSリリース名を選ぶためのアプリを見てみましょう。ただし、アニメーション化された移行はありません。
 UIKitを使って以前にアプリを書いたことがあれば、このインターフェースを構築するために必要な要素の種類はわかります。
それは多くの見解ではありませんが、正しく理解する必要がある個々の詳細がたくさんあります。
 SwiftUIでは、それははるかに少ないコードです。
たった3つの重要なことに焦点を絞った20行未満。
まず、ビューの構造とレイアウトを定義するための数行です。
それからあなたのコンテンツを表示するためのいくつかの画像とテキストビュー。
そして最後に、それがすべてどのように見えるかを調整するためのパラメータと修飾子。
それでは、これらのうちのいくつかの行をもう少し詳しく見てみましょう。
スクローリングリスト自体は、ほとんどコードです。
リストを宣言してから、各行で使用されるモデルオブジェクトを記述するだけです。
セットアップも設定も、コールバックもありません。
今すぐ上部の画像も同じくらい簡単です。
画像を表示し、それを円に切り取り、影を付けます。
そしてそれは単なるコードではありません。
それはより良いコードです。
明白なアプローチが正しいアプローチになるようにAPIを設計しました。
このラベルを作成するための正しい方法は、あなたが書くと思う1行のコードです。
ダイナミックタイプ、ダークモードなどをサポートしています。
実際、ここで使用されている文字列補間でも完全にローカライズ可能です。
この単純さはエラーの全カテゴリーを排除します。
もう一度リストを見ると、モデルが変更されるとその行が自動的に更新されるため、UIは常に最新の状態に保たれ、古くなったデータは表示されません。
そしてそれも読みやすいです。
この画像のコーナ半径が3のコードは、正確にそれを示しています。
 SwiftUIを読むことは、誰かがあなたにそのインターフェースを説明するようなものです。
そして、SwiftUiのコードは至るところで利用可能であり、あなたがあなたがもっと多くのコードを全てのAppleプラットフォームの間で再利用するのを助けます。
これで、モデルと低レベルの描画コードおよび合成コードを長い間共有できましたが、高レベルのUIコードはほとんどプラットフォーム固有のままです。
 SwiftUIを使用すると、その水準を引き上げることで、より多くの情報を共有できるようになります。
もちろん、アプリケーションを配置した場所のどこにでも快適に表示できるように、個々のプラットフォームに合わせてインターフェイスを調整する必要があります。
しかし、SwiftUIの共通APIパターンセットを使用すれば、これらのツールを一度習得してからどこにでも適用することができ、デプロイするプラットフォームごとにネイティブインターフェイスが得られます。
 SwiftUIは強力な4つのコア原則のセットで設計されています。
まず、宣言的な構文により、UIプログラミングを画面の更新方法から切り離し、代わりに表示したいものに集中することができます。
たとえば、見出しのフォントとグレーの色でラベルを作成したいとしましょう。
それをどのように実現するかを記述することは、多くのステップが特定の順序で行われなければならないマルチステッププロセスです。
しかし、あなたが欲しいものを記述することは翻訳を必要としません。
灰色の見出しのフォントでDoneと書かれているテキスト。
 SwiftUIを使用すると、新しい宣言的構文を使用して、そのことを正確に言えます。
そしてそれはあなたの考えを正確に記述するのに必要な最小限のコードです。
そして、繰り返しもかなり速くなります。
後でそのラベルを変更してボタンにする必要がある場合、それは1行の変更です。
 【拍手】
私は知っています、それはかなり素晴らしいです。
 【拍手】
大丈夫です、だから私たちの2番目の原則は可能な限り自動機能を提供するべきだということです。
これにより、これまで手作業で記述しなければならなかった大量のコードが不要になります。
 macOSリリースの命名のための私たちのアプリはとても単純です、それでもそれは自動機能の膨大な量を含みます。
スペースとセーフエリアインセットのデフォルトの処理が行われます。
右から左へ記述する言語のローカライズ性とレイアウトの調整
動的型、ダークモード、その他さまざまなことが、すべて1つの最小限の説明から可能です。
これは、少量のコードに対して驚くべき量の自動機能ですが、非常に重要な点がもう1つあります。
私たちの最新のインターフェースはインタラクティブで、それらはアニメーション化されています。
そしてSwiftUIでは、同じインターフェース宣言も自動的に完全にアニメート可能になります。
 1行のコードでアニメーションを階層全体で有効にできます。
簿記はありません、準備はありませんし、クリーンアップもありません。
 Keynote Magic Moveアニメーションを以前に使用したことがあれば、SwiftUIアニメーションはそれほど簡単で強力です。
また、追加および削除されたビューについては、あと1行のコードでビューの内外への遷移方法を指定できます。
アニメーションが進行中でも、アプリは完全にインタラクティブで反応がよく、いつでもユーザー入力を処理する準備ができています。
また、ユーザーがこれらのアニメーションの1つを中断した場合や、新しい場所に移動する必要がある場合は、SwiftUIがそのすべてを自動的に処理します。
私たちの3番目の原則は、合成APIの方が習得が簡単で、反復処理がはるかに速いということです。
このテキストラベルのように個々のビューをどのように宣言できるかを見てきました。
しかし、より複雑なビューを宣言するのも同じくらい簡単です。
あなたはただ複数の小さい部分を一緒に構成します。
水平および垂直スタックなどのコンテナを使用すると、複数の単純な要素を組み合わせるだけで、強力なレイアウトを簡単に構築できます。
また、SwiftUIは標準の修飾子構文を使用して、ビュープロパティにも合成を適用します。
このテキストをグレーにするためにここで適用される色のように、一般的な修飾子のセットを任意のビューに適用できます。
この構成アプローチでは、少数のビューと修飾子を学び、それらを組み合わせて次第に強力なインターフェースを作成することができます。
そして私たちの最後の原則は、あなたのインターフェースは常に一貫した状態にあるべきだということです。
あなたのUIはあなたのアプリのデータを反映しているので、2つは常に同期しているべきです。
従来のAPIでは、これは間違いを起こしやすいものです。
しかしSwiftUIでは、データが変更されるたびにインターフェースが自動的に更新されます。
今すぐあなたのデータが由来する可能性がある2つの一般的な場所があります。
今すぐ最初のモデルオブジェクトです。
また、既存のモデルオブジェクトを新しいバインド可能なオブジェクトプロトコルに準拠させるだけで直接使用できます。
唯一の要件は、モデル内のデータがいつ変更されるかを指定することです。
 2番目の場所は、ビューが現在編集モードになっているかどうかなど、一時的なUI状態です。
これらは、ビュー上の任意のプロパティに適用された単純な状態ラッパーを使用して宣言されています。
私たちはみんなすべてのビューのすべてのプロパティが変更可能であることに慣れていますが、SwiftUIを使い始めると、アプリが実際に必要な変更可能ステートがほとんどないことに気付くことになります。
モデルや状態が変わるたびに、そのUIは自動的に更新されます。
そしてそれは全てSwiftコードなので、そのインターフェース宣言の中であなたのモデルオブジェクトを直接使用することができる一方であなたはこの挙動を得ます。
追加の間接参照を必要とせずに、値を変換してインラインでフォーマットすることもできます。
たとえば、この文字列補間を使って日付をフォーマットすると、完全にローカライズされたフォーマット済みテキストになります。
これらすべてのことは、Swift UIを使用することで、作成するコードが少なくなり、より一貫性のあるUIが得られることを意味します。
これらがSwiftUIの4つのコア原則です。
あなたのインターフェースが常に一貫した状態にあることを保証するコンポジションAPIを使って膨大な量の自動機能を可能にする強力な宣言的シンタックス。
そして素晴らしい新しいフレームワークは信じられないほどのツールに値します。
また、SwiftUI用にゼロから設計されたまったく新しいワークフローをXcode内に作成しました。
あなたは、UIツールの使いやすさと迅速な反復と組み合わせたコードのパワーと柔軟性を手に入れます。
あなたはいつも両方にアクセスすることができますので、二度と選ぶ必要はありません。
そしてツールはあなたの実際の既存のソースコード上で動作するので、あなたは本当にライブ開発の経験をします。
このワークフローの素晴らしさを本当に理解するためには、もう一度このワークフローを実行する必要があります。
そして今すぐあなたにそれを見せるために、私はあなたにデモをするためにケビンを招きます。
 【拍手】
 >>ありがとう、ジョシュ。
あなたは楽しい時を過す準備ができていますか？
大丈夫です、だから私はハイキングアプリを作っています、そして私はトレイルがどれほど難しいかを教えてくれる私のテーブルビューセルにビューを追加したいです。
それでは、図書館から始めましょう。
テキストをいくつか用意します。
ドラッグしているうちに、Xcodeは私にレイアウトを提案しています。
今、私はそれを欲しいところにXcodeに伝えるだけで、Xcodeは私のためにレイアウトを考え出します。
これで、このビューのプロパティを編集できます。
そこで、ここでキャンバス内をクリックして、ここにカスタムメイドのインスペクタを作成します。
このテキストをもう少し小さくしましょう。
今すぐ見る - これをしている間にコードを見てください。
あなたはそれが私のためにコードを書いているのを見るでしょう。
これで、コードを編集するだけで、ソースエディタでここでも同じことができます。
そして、Xcodeが私のコードを構築して実行し、右側のキャンバスを更新するのを見ることができます。
今どこにいても、自分のデザインツールすべてにアクセスできます。
それで、私はちょうどこのVスタックをクリックしてインスペクタを開くつもりです。
また、必要なプロパティを変更することもできます。
繰り返すのはとても速いです。
さて、あなたはこのビューにこのタイトルとこの難しさのようないくつかの入力があることに気づくかもしれません。
では、Xcodeはどのようにしてプレビューに表示するデータを知るのでしょうか。
これは常にUI開発における課題の1つでした。設計時にどのようなデータを表示しますか？
これが、Xcodeのプレビューを発明した理由です。
プレビューとは何ですか？
お見せします。
それではここで下にスクロールさせてください。
このコードスニペットはここにあります - プレビューはデザインタイムのためにそれを構成する私のアプリケーションのコードのスニペットです。
これは私のアプリケーション内にあるので、私は自分のプロジェクト内のすべてのコードにアクセスできます。
それは私のプロジェクトにあるので、チェックインしてチームメンバーと共有することができます。
そして別のデータを試すのはとても簡単です。
今ここで実際にここでハーフドームはかなり難しいです。
それでは、それが一見ハードに見えるものを見てみましょう。
それは6マイルではなく16マイルだからです。
そしてそれは本当にコンパイルコードです。
これがSwiftUIコードなので、私は私の残りのUI開発に使用するすべての修飾子にアクセスできます。
だから我々はそれがダークモードでどのように見えるかを見ることができます。
また、プレビュー固有の修飾子もあります。
そのため、デフォルトではプレビューはデバイスのサイズになりますが、テーブルビューのセルに取り組んでいるので、そのコンテンツに注目しましょう。
だから私はちょうどそれが合うサイズにするつもりです。
さて、今ここでプレビューについて本当にクールなことです。
あなたは好きなだけ持つことができます。
それでは、まったく異なるデータを含む2番目のプレビューを追加しましょう。
しかし、それだけではありません。
クリックを命令しましょう、それを数回繰り返してください。
一般的な動的型サイズをいくつか列挙してから、その動的型サイズを使用するようにセルを構成しましょう。
一目で、ライトモード、ダークモード、複数の異なるダイナミックタイプサイズのセルを同時に見ることができます。
 【拍手】
このセルをタップすると、詳細ビ​​ューに行きたいのです。
それでは、今そのファイルに切り替えて見てみましょう。
今、私は何年ものハイキングを通して、トレイルをその名前で判断するべきではないことを学びました。
だから私は私たちがその画像を本当に大きくするために私たちの詳細ビューを設定できることが本当に重要です。
そして私はすでにSwiftUIの状態でこれを行っています。
そのため、バナーをタップすると、その展開状態を切り替える必要があります。
これで、再生ボタンをクリックするだけで、UIでそのことをテストできます。
これは私が持っているすべてのプレビューを取り、それを完全にインタラクティブにします。
それで私はただクリックしてそれらの異なる展開状態をテストすることができます。
これで、アニメーションでこれを本当に磨くことができます。
それはとても簡単です。
そのため、状態の変化をホイップアニメーションブロックでラップするだけで、美しいデフォルトのアニメーションが得られます。
 【拍手】
それをカスタマイズするのも同じくらい簡単です。
それでは、いくつかの劇的な効果のためにそれを遅くしましょう、そして今私はそれを開く美しいアニメーションを手に入れます。
 SwiftUIの素晴らしいところは、すべてのアニメーションがキャンセル可能でリバーシブルになっていることです。これにより、私のアプリケーションはずっと応答しやすくなります。
さて、テーブルビューのセルがあり、詳細ビューがあります。
それでは、まとめてみましょう。
だから私はここで私の最後の値に切り替えていくつもりです。
だから私がやりたいことは、実際にこれが実際のデバイスでどのように見えるかを見たいということです。
ボタンをクリックするだけで - これをクリックしましょう -  Xcodeはデバイス用に私のプロジェクトをビルドします。
それはそれをインストールしようとしています、そしてそれは私のプレビューをデバイス上でまさにここで起動するつもりです。
そして、あなたはそれがここで完全にインタラクティブであることを見ることができます。
それでは最初に、作成したセルを使用しましょう。
だから私はただこのテキストをトレイルセルに変更します。
これで、トレイルが表示されているのがわかります。
そして今、これをタップすると、作成した詳細ビューに移動したいのです。
これはSwiftUIではとても簡単です。
これをナビゲーションボタンで囲むだけで、詳細ビューに進むことができます。
そして今、あなたはシェブロンが現れるのを見ることができます。
それでは、Snow Creekをチェックして、その絵に移りましょう。
そして、大丈夫、雪の中、そして難しい。
それは楽しい道のようには思えません。
だから私はSwiftUIコードの1行だけでやろうとしている削除するスワイプを追加します。
そして今、私たちは「私たちはその道をやりたくない」と言うことができます。 そして最後に、ダークモードの様子を見てみましょう。
何もしなければ、プレビューはダークモードになり、きれいに見えることがわかります。
 【拍手】
私たちは谷間の床をタップしてズームインできます。
そしてそれは週を終わらせるための素晴らしい方法のように見えます。
そのため、ナビゲーション、ダイナミックタイプサイズ、ライトモード、ダークモード、複数の異なるデータを使用してアプリを作成し、実際のデバイス上ですべて構築して実行することなく確認しました。
今それは楽しいです。
ジョシュさん、よろしくお願いします。
 【拍手】
 >>ありがとう、ケビン。
すべての権利、これは本当に完全にネイティブコードのための本当に信じられないほど新しいワークフローです。
ツールであなたがすることは常にデバッグ可能、拡散可能、検索可能、そして理解可能です。
そして、あなたはいつでもコードを直接編集することができるので、あなたはあなたのワークフローにおいて信じられないほどの柔軟性を得ます。
そしてSwiftUIは私たちのすべてのオペレーティングシステムに深く統合されているので、それを使うことであなたがターゲットにしているプラ​​ットフォームのための完全にネイティブなアプリになるでしょう。
他のネイティブアプリと同じパフォーマンス、同じ動作、同じコントロールが得られます。
そして、あなたは自分のペースでSwiftUIを採用することができます。
あなたは、あなたのアプリケーションの一つのビューからアプリケーション全体に至るまで、あなたは何にでもそれを使うことができます。
既存のすべてのUIKit、AppKit、およびWatchKitコードとシームレスに連携するので、何も書き直す必要はありません。
また、迅速に対応できるように、Googleのドキュメントチームは、まったく新しいスタイルのインタラクティブドキュメントを開発しました。
新しいプロジェクトの作成から完全にインタラクティブなインターフェースの構築に至るまで、すばやくステップバイステップで移動できます。
だから、あなたはすぐにスピードに慣れるでしょう。
 【拍手】
それがSwiftUIとXcodeの新しいツールの一部です。
もちろん、これはSwiftとXcodeにとって大きな年なので、この話にはまだまだあります。
そしてそれについてあなたにもっと話すために、私は物事をマシューに手渡すつもりです。
ありがとう。
 【拍手】
 >>ありがとう、ジョシュ。
今年リリースされた当社のツールは、SwiftとXcodeの革新的技術を組み合わせて素晴らしい結果をもたらします。
それではSwiftから始めましょう。
今、私たちの5年目で、Swiftは成熟し、飛躍し続けています。
機械学習から拡張現実まで、私たちの最新かつ重要なテクノロジが可能なのは、Swiftとそれが今や私たちのOSの一部になっているからです。
これを実現するために、今春初めに単一の共有Swiftランタイムを使用することでアプリのサイズを縮小するABI安定性を導入しました。
 【拍手】
互換性を保証するモジュールの安定性を追求しています - はい。
 【拍手】
これにより、バイナリと現在および将来のSwiftコンパイラのバージョンとの互換性が保証されます。
そしてこれらは、Swiftがあなたのプロジェクトにもたらす可能性をさらに広げる、他の多くの言語機能、ツールのエディション、そしてパフォーマンスとコードサイズの改善と並んでいます。
そのため、Swiftはすでにあなたのアプリの言語であり、今やこれまで以上に共通のコードをすべてのAppleプラットフォームで共有するための言語となっています。
実際、共有がSwiftパッケージを作成した理由です。これは、自分のコードを開発および共有し、他のコードを再利用するための最良の方法です。
そして今日は2つの大きな発表があります。
 GitHubはSwitパッケージのサポートをGitHubパッケージレジストリに追加する予定です。
 【拍手】
 XcodeがiOS、iPadOS、およびすべてのプラットフォーム上のアプリケーション用のSwiftパッケージをシームレスにサポートするようになったため、これは完璧です。
 【拍手】
 Swiftパッケージは、ワークスペース内の最上位項目であり、常に表示され、常にアクセス可能で、そして高度に統合されています。
コミュニティのパッケージとあなたが作成したパッケージは、ソース管理、デバッグ、テスト、そして作業のためにXcodeのすべてのワークフローに即座にアクセスすることができます。
 SwiftパッケージはXcodeに組み込まれているので、コードを共有しています。
これが今年のXcodeリリースのほんの始まりに過ぎません。それはあなたの生産性を最大にすることに焦点を合わせています。
また、Xcodeを11まで引き上げると、今日あなたと共有するための改善点がいくつかあります。
それでは、Xcode Workspaceという最も大きな変更点の1つから始めましょう。
私たちはあなたに完全な編集管理を与えています。
あなたは今、あなたが好きなエディタを作成し管理することができます。
好みのスタイルやレイアウトが何であれ、いつでもどこでも好きなときにエディタを追加したり削除したりできます。
 【拍手】
さらに良いことに、あなたのワークスペースは今も焦点を合わせることができます。
それで、あなたはどんなエディタでもそれを最大化することができます、そして、それが終わったら、ただそれを元に戻すだけでそれはあなたが始めたところに戻ります。
 【拍手】
それで、あなたが最小のラップトップで作業しているか最大のディスプレイで作業しているかにかかわらず、あなたのワークスペースはあなたのために今働く。
現在、私たちのエディターの関連コンテンツ、カウンターパートのようなスマートセレクションもまた、大きな後押しを受けています。
プレビュー、キャンバス、ライブビューなどの新しいオプションがあります。
ワークスペースのどのエディタでも関連コンテンツを使用できます。
そして、あなたは何よりもこれが一番好きです。
コンテンツがなくなると、コンテンツは自動的に消えます。そのため、あなたはもはやそれらの可視性を管理する必要はありません。
 【拍手】
ワークスペースをセットアップした後は、編集作業がすべて終了しました。今年度の新しいソース編集機能のいくつかについて簡単に説明します。
各エディタを好きなように設定できるように、右上に新しい[オプション]メニューがあります。
あなたはここで私がアシスタントまたは任意の関連コンテンツを有効にすることができるのを見ることができます。
コードカバレッジやソース管理の作成者をオンにすることができます。
私たちの最新機能であるミニマップをオンにします。
だからミニマップはあなたがあなたがナビゲートするのを助けるためにあなたにあなたのファイルの構造的な概観を与える。
あなたはドキュメンテーション、方法と機能を見ることができます。
ファイルを簡単に移動できます。
他のランドマークを残したい場合は、markシンタックスを使用して、ソースとミニマップに表示されるラベルと水平方向の仕切りを追加できます。
 【拍手】
ミニマップにカーソルを合わせると、ファイルの象徴的なランドマークが表示されます。
ここにプロのヒントがあります。コマンドキーを押したままにすると、ファイルのすべてのランドマークが表示され、目的の場所に簡単に移動できるようになります。
 【拍手】
また、ミニマップには問題、テストの失敗、ファイル内の検索結果も表示されます。
そして私達はそれを完全にアクセス可能にしました。
あなたは私たちのソースエディタが今飛び出るのを見つけるでしょう、そして私達が私達の構文のカラーリングを深めたのであなたのコードはもっと鮮やかです。
また、ここではイタリック体、太字、コード内の音声を使用して、ドキュメントのサポートが強化されています。
また、ドキュメントを追加すると、ドキュメントを入力した後に追加された可能性のある不足しているパラメータが自動的に追加されます。
 【拍手】
さらに優れているのは、ドキュメントとコードを同期させることです。
 [すべて編集]と[スコープ]が両方同時に変更されていることがわかります。
 【拍手】
今、私たちはまたあなたがあなたの変更を追跡するのを助けるためにいくつかの追加の助けを加えたいと思いました。
このファイルに対するすべての変更を確認したい場合は、このファイルに対して行われたすべての変更を表示する新しいソース管理履歴インスペクタを開くことができ、すぐに任意のコミットにジャンプすることができます。
インスペクタ内にあるので、これはプロジェクト内のあらゆるファイルタイプに対して機能します。
ローカルの変更を確認しやすくするために、変更バーも改善されました。
チェンジバーの上にカーソルを置くと、ローカルの変更が表示されます。
しかし、スニペットを手に入れるために行った変更の前に、コードを表示させることができます。
 【拍手】
そしてもちろん、それはライブです、私がタイプし始めるとき、それは私を最新にしておくために更新するでしょう。
つまり、これらはXcode 11にある数多くのソース編集機能のほんの一部です。
 【拍手】
さて、それでテストはもう一つの重要な開発ワークフローです。
そしてXcodeはすでにテストを書くことを大いにサポートしています。もちろん、たくさん書いているので、皆さんはすでに知っているでしょう。
 >>うん。
 >>うん。
 >>優秀です。
それが私たちが聞きたいことです。
今、あなたが知らないかもしれないことは、Xcodeがランタイム問題、消毒剤、ローカライゼーションシミュレーションのような素晴らしいツールを使うことによってあなたのテストでさらに多くをすることができるということです。
そして、私たちは毎年これらをもっと追加します。
非常に多くのオプションを使用した場合、欠けているのは、それらをすべて1か所にまとめて並列に使用する方法です。
そのために、テスト計画を追加しています。
テスト計画の威力は、さまざまな構成でテストを実行することによってもたらされます。
いくつかの簡単な選択で、あなたは即座にあなたのグローバルオーディエンスをテストすることができます。
また、この設定は、App Storeのスクリーンショットをキャプチャしたり、ローカライズ担当者のために詳細を収集したりするのにも最適です。
ええ、それを称賛しても大丈夫です。
これは大したことです。
 【拍手】
他の診断、ツール、パラメータを追加することで、あらゆる角度からアプリを見ることができます。
また、多くのデバイスとOSの組み合わせに対してテストプランを実行して、アプリケーションがどのように機能しているかを包括的に把握すると、カバレッジがさらに向上します。
この規模でのテストでは、テスト計画は新しいMac Proを最大限に活用できるXcode Serverと、シミュレータとデバイスでのXcodeの新しい並行テストで完璧に機能します。
テスト計画の結果は、アプリのすべてのテストを実行するコマンドが1つになりました。
だからこれは大きな進歩です。
 【拍手】
テストやデバッグを行うときには、ユーザーシナリオを再現する必要があります。
そして、私たちの新しいDevice Conditionsが電話に出ます。
これで、デバイスのネットワークスループットと温度状態にさまざまな条件を設定し、アプリの反応を確認できます。
これらは実際には単なるシミュレーションです。
私たちは実際にあなたのデバイスをここで過熱させるつもりはありません。
 Xcodeの「デバイス」ウインドウで条件を有効にできます。
そして条件が活発なとき装置は旗を表示する。
バナーをタップして条件を無効にすると、デバイスを取り外すとXcodeが自動的に条件を終了します。
これで、これから実行しようとしているすべてのテストについて、結果バンドルが改善され、スタンドアロンになりました。
 Xcodeで作成しても、コマンドラインから作成しても、それらを電子メールで共有し、バグに添付してからダブルクリックするだけで詳細を確認できます。
 【拍手】
アプリをさらに改良するために、2つの新しいフィードバックツールを紹介します。
まず、iOSおよびiPadOS App Storeアプリのアプリパフォーマンス指標です。
ユーザーが分析の共有を選択すると、バッテリ寿命、起動時間、メモリ使用量などについて匿名化されたメトリクスを受け取ることになります。
これらのメトリクスは、クラッシュログとエネルギーログと一緒にまとめられてオーガナイザーに表示されます。これは、ビルドごとにアプリのパフォーマンスを監視および改善するための優れた方法です。
これらの集約された測定基準は、私たちはiOS 12.2で春にそれらを集め始めました。
だからあなたのアプリの多くはすでにレビューするデータを持っているでしょう。
フィードバックのもう1つの優れた情報源は、ユーザーからの直接のものです。TestFlightでは、ユーザーが自分の考えを共有できるようになります。
 Test Flightアプリは自動的にユーザーフィードバックを有効にします。
ユーザーがあなたのアプリでスクリーンショットを撮るとき、彼らはベータフィードバックとしてそれを共有するための新しいオプションを持つでしょう。
 【拍手】
 App Store Connectに関するすべてのフィードバックを確認して、バグ追跡システムに関する詳細をすべてダウンロードできます。
したがって、今日のこれらすべての機能は、Swift、SDK、およびすべてのツールのイノベーションをまとめたXcodeリリースのほんの一部に過ぎません。
あなたがこれまで以上に速くあなたの最善の仕事をするのを助けるためのこれらすべて。
それがXcode 11です。
 【拍手】
 >>そして今、私はSebastienを招待してAppleのプラットフォームについてもっと教えて欲しい。
セバスチャン？
 【拍手】
 >>ありがとう、マシュー。
それほど素晴らしかったですか？
本当に、あなた全員がより良いアプリケーションを構築するのを助けるための本当に素晴らしい機能。
それでは、プラットフォームに切り替えましょう。
そしてもちろん、私たちのプラットフォーム自体は素晴らしい経験を提供するように調整されており、それらはそれぞれが使われるユニークな方法を本当に反映しています。
ですから、今年行っていることのいくつかはそれぞれの人にとってユニークなものです。そしてこれからやろうとしていることは、macOSに飛び込んで、そこで行っていることをあなたに伝えることです。
 macOS Catalinaは、スクリーンタイムや新しいMusicアプリなど、魅力的な新機能が豊富に揃った素晴らしいリリースです。
そして、MacはSidecarのような驚くべき生産性機能でもう一つの大きな前進をする。
私たちはサイドカーを好きになるでしょうね。
 【拍手】
大丈夫。
 1億人を超えるユーザーが活発にインストールされているMacは、豊富なアプリエコシステムを備えた活気のあるプラットフォームです。
そして、Macエコシステムは、あなたが私たちのAppKitフレームワークを使って作成した強力なネイティブアプリケーションでいっぱいです。
そしてその好例がPixelmator Proです。
今AppKitはMacの全機能を可能にする強力なフレームワークです。
しかし、私たちはまた、iPad上でMac上で実行するのに最適なアプリケーションがいくつかあることを認識していますが、それをMacにもたらすためにAppKitを使用する時間が常にあるとは限りません。
そこで今年は、iPadOSアプリを使って最小限の労力でそれをMacに持ち込むことができるテクノロジを使って、ネイティブのMacアプリを作成する方法を追加します。
私たち - あなたは2枚のスライドに戻ることができますか？
ごめんなさい。
もう一つ。
大丈夫。
これは、Macが世界最大のアプリエコシステムを活用する大きなチャンスです。
そこには何百万ものiPadアプリが出回っています、そしてそれらの多くはMac上でも本当に素晴らしいものになると思います。
これを達成するために、40以上のフレームワークとライブラリをiOSからMacに移植しました。
まだMacアプリを持っていない既存のiOS開発者であれば、両方のプラットフォームで同じAPIを利用できるようにするのが好きになるでしょう。
実際、私たちはほとんどすべてのiOS APIセットを利用可能にしましたが、ユニークなモバイル機能についてはごく少数の例外があります。
現在は、UI Kitをネイティブフレームワークとして採用することでこれを達成しました。
これにより、iPadアプリをMac上で実行し、プラットフォーム上の他のアプリと同じくらい速くて流動的に感じることができます。
そして、UI Kitを直接macOSに統合することによって、基本の多くは自動的に行われます。
 Macのデスクトップ機能やウィンドウ機能の多くは何もせずに追加されています。また、タッチコントロールのようなプラットフォーム固有の要素をキーボードやマウスの入力に適応させるので、作業量が大幅に削減されます。
今、私たちは何年も前からこの技術に取り組んできました、そして私たちはそれを我々自身のアプリのために使っています。
あなたがiPadOSアプリを持っているなら、Macをターゲットにすることはとても簡単です。
基本的に3つのステップがあります。
まず、Xcodeのチェックボックスをクリックしてください - ここに行きます。
[ 笑い ]
それは簡単です。
Xcodeのプロジェクトエディタで、プロジェクトのMacサポートをオンにします。
そこに行きます。
それと同じくらい簡単です。
そしてこれが魔法です。
その単一のプロジェクトとターゲットは、3つすべてのプラットフォーム用のアプリケーションを構築します。
そしてあなたがあなたのソースに変更を加えると、3つのアプリケーションすべてが自動的に更新されます。
2番目のステップはあなたのアプリがiPad上で素晴らしいことを確認することです。
より良いiPadアプリは、より良いMacアプリにもなります。
そのため、最新のテクノロジを採用し、より大きなiPadスクリーン用に最適化するためにあなたが投入した作業は、驚くほどMacに変換されます。
外付けキーボードのサポートなど、ベストプラクティスに従うだけでも、Macの経験が豊かになります。
3番目のステップは、特定のMacの機能を利用することです。
これが、フルメニューやツールバーのような典型的なMac特有のユーザーインターフェース要素を最大限に活用するカスタマイズをするところです。
また、該当する場合はサイドバーとその特別な素材も使用します。
これがいかに簡単であるかを示すために、デモのためにステージ上でMatthewを招待したいと思います。
マシュー？
【拍手】
>>ありがとう、Sebastien。
ここでは、iPad Simulatorで旅行アプリケーションを実行しています。
場所のリストビューです。
場所を選択すると、地球が回転します。
そして、私たちは日記の中で私の旅行を追跡し始めることができる伐採場所を持っています。
Sebastienの3つのステップに従って、このアプリをMacに持ってきましょう。
ステップ1、ボックスをチェックしてください。
私はシミュレータを終了し、ここでターゲットエディタでそれを有効にするためにMacサポートのためのボックスをチェックします。
それでおしまい。
これで、Mac用に自分のアプリケーションをビルドして実行することができます。
チェックボックスをオンにして、送信先としてMacを追加しました。
だから私は私のアプリのためのデバイスとシミュレータの間で選ぶことができるのと同じように、私は今Macを選ぶことができます。
そして、これがMacアプリです。
左側のリストビューで、場所を選択してログインします。
【拍手】
とても強力なチェックボックスです。
それでは、ステップ2に進みましょう。素晴らしいiPadアプリを作成しましょう。
私は自分のリストビューからアクションを実装していません。お気に入りへの追加や共有への追加などです。
iPad用にそれらを実装すると、それらはMac上でコンテキストメニューとして表示されます。
それは二重の勝利です。
それで、私はここでMacアプリを終了し、私のサイドバーコントローラに変更し、そして各項目のためにそれらのメニューを設定するテーブルビューデリゲートメソッドを追加するだけです。
はい。
ステップ3に進みましょう。
私のMacアプリのサイドバーを元気にしてもらいたい。
現在、この変更は自動的には発生しません。適切であることを確認するために確認する必要があるためです。
あなたがそれがあなたが望むものであることを見つけたとき、それは背景スタイルをサイドバーに設定するための簡単な一行の変更です。
それでは、最後の変更として、アプリケーションにメニューバーを追加したいと思います。
そこでここではストーリーボードでライブラリを立ち上げてメニューを検索します。
メインメニューをつかみ、ストーリーボードにドラッグして、ファイルメニューを開きます。
ログインアクションのためのメニューコマンドをここに追加したいのですが。
だから我々はこれをLoginと呼びます。
Command-Lと同等のものにします。
そして今、私はメニュー項目を私がすでにログインに使っているアクションに接続する必要があります。
はい？
それでおしまい。
変更をビルドして実行しましょう。
私たちはアプリケーションを見ることができるように、しばらくの間Xcodeを上に隠して隠そうとしています。
さて、今、私たちは活気に満ちたサイドバーを持っています。
項目を選択すると、コンテキストメニューが表示され、[ファイル]メニューの[ログイン]アクションが表示されます。
それで、ちょうどそのように、3つの簡単なステップ。
【拍手】
アプリをMacに移行し、すべてのユーザーに優れたユーザーエクスペリエンスを提供するための3つの簡単な手順。
あなたに戻って、Sebastien。
【拍手】
>>ありがとう、マシュー。
本当にすごかったです。
これはあなたが行って試してみたくないのですか？
はい。
実際のところ、ここ数週間で私たちはこれを試しに回すように多くの開発者を招待しました。
そして、彼らが数週間で成し遂げた進歩は、本当に印象的です。
これは、すでにMac上で実行されているiPadアプリのサンプルです。
Macアプリを作成したら、それをユーザーに配布する最善の方法はMac App Storeを使用することです。
それはMacアプリの最大のカタログを特徴とします。
それは世界中の155カ国で利用可能であり、そしてMac App Storeはあなたがあらゆる一人のMacユーザと連絡をとることを可能にする。
また、ゲートキーパーを構築して、悪意のあるソフトウェアからユーザーを保護しながら、ユーザーが柔軟にアプリケーションを入手する方法を選択できるようにしました。
そしてmacOS Catalinaでは、Gatekeeperは最初の起動時とその後定期的にインターネットから実行するアプリを検証して、既知のマルウェアがないことを確認します。
これは、開発者に、昨年発表した公証サービスを新しいアプリと更新したアプリの両方に使用するように要求することで達成されます。
だから今、あなたとあなたのユーザは安全にMac App Storeとインターネットの両方からアプリを手に入れることができます。
公証はすでに広く採用されています。
それは15分以内に完成した提出物の98％以上で簡単で速いです。
今セキュリティについて言えば、私たちはmacOSの基礎に投資し続けています、そして私は3つの領域に焦点を合わせたいと思います。
まず、Driver Kitと呼ばれる新しいテクノロジで、カーネルの拡張機能をカーネルからユーザー空間に移動できます。
そして、これらのドライバや拡張機能をユーザープロセスとして実行することで、私たちはすべてのユーザーにとってmacOSの安定性を向上させます。
過去にカーネルエクステンションを必要とした最も一般的なユースケースを特定しました。そして今では、それらの75％以上をmacOS Catalinaで代替するユーザースペースがあります。
今後のバージョンのmacOSでは、これらの種類のカーネル拡張機能が実行されなくなるため、Driver Kitを採用することをお勧めします。
次に、システムボリュームを読み取り専用にすることで、macOSの安定性を向上させています。
これがどのように機能するかです。
今日は、ユーザーデータ、アプリ、オペレーティングシステムを含む単一のボリュームがあります。
そしてさらにmacOSを変更から隔離するために、Macは2つの論理ボリュームに分割されます。
一方は読み取り専用になるオペレーティングシステムファイル用、もう一方はユーザーデータとアプリケーション用です。
【拍手】
そこに行きます。
【拍手】
これにより、オペレーティングシステムを変更からさらに保護し、安定性を高め、将来のセキュリティ上の利点を提供できるようにします。
今あなたの何人かはあなたのアプリやあなたのインストーラで仮定をしたかもしれません、そしてあなたはそれがmacOS Catalinaでシームレスに動作することをチェックしたいでしょう。
最後に、アプリとデータ保護の強化。
ここ数年は、ユーザーが写真などの重要なファイルや、Macのカメラやマイクなどの機密センサーにアクセスできるかどうかをユーザーが制御できるように、データ保護のカテゴリを追加してきました。
macOS Catalinaでは、入力イベントをキャプチャする前にアプリが許可を求めていることを確認することで、この作業を続けています。これにより、キープレスや画面録画などが可能になります。
また、Mac上のユーザーデータを保護するため、ユーザーがデスクトップに保存しているファイル、ダウンロード、ドキュメント、iCloudドライブ、外付けドライブにアクセスする前に、アプリが許可を取得する必要があります。
ええ
【拍手】
私たちはmacOS Catalinaでもたらしているすべての機能強化に本当に興奮しています。
今年、本当に大きな変化をもたらしたもう1つのプラットフォームは、watchOSです。
そして、もっと詳しく言うと、私はLoriをステージに招待したいのですが。
ロリ？
【拍手】
>>ありがとう、Sebastien。
【拍手】
今朝、watchOS 6のクールで新しい機能の多くを紹介しました。それには、ノイズやサイクルの追跡、活動の傾向、オーディオブックなどの新しい健康アプリが含まれます。
しかし、watchOS 6の本当の話は、電話からの独立を宣言し、完全に監視に焦点を絞ったエクスペリエンスを構築することが可能になったということです。
【拍手】
携帯電話の接続性のおかげで、顧客はますます電話を置き去りにし、接続を維持するためにApple Watchだけを使って自由を楽しんでいます。
音楽を聴くことから友人とチャットすることまで、用事を実行することからトレーニングを実行することまで、すべてのユーザーが素晴らしいApple Watch体験を制限なく楽しむことを望みます。
独立した監視アプリがそれを可能にします。
私たちはApple Watchのために開発することの課題をよく見て、独立した経験をサポートすることを可能にする新しいAPIをあなたにもたらすだけでなく、Apple Watch開発者である経験を完全に刷新するために一生懸命働きました。
私はあなたが時計アプリだけである時計アプリを作成することが可能であるとあなたに言ったならばどうでしょうか？
優れた監視専用のエクスペリエンスのアイデアがある場合は、Xcodeを使用することで、単なる監視アプリケーションである監視アプリケーションを簡単に作成できます。
そのため、iOSアプリを作成しなくても、アイデアを追求できます。
また、iOSアプリをすでにお持ちの場合でも、Apple Watchをスタンドアロンプ​​ッシュターゲットにするなど、watchOS 6でいくつかの重要な変更を加えたことで、そのアプリから完全に独立したアプリを作成できます。
あなたは仲介するために電話に頼ることなくあなたのユーザーとあなたのアプリデータの両方を更新することができるように今すぐあなたは腕時計に直接通知を送るオプションを持っています。
【拍手】
また、Cloud Kitのサブスクリプションや複雑なプッシュをサポートしているため、アプリを最新の状態に保つことができます。
また、iPhoneアプリケーションをお持ちでない場合は、iPhoneへのサインインをユーザーに依頼することはできませんので、watchOS 6ではテキストフィールドを用意しているので、Apple Watchでアカウントの作成とサインインのオプションを直接提供できます。
アカウントの作成を非常に簡単にしたい場合は、Appleに割り当てボタンをアプリに追加して、ユーザーがアカウントを設定し、すでに持っているApple IDでサインインできるようにすることもできます。
新しいパスワードやテキスト入力は不要です。
watchOS 6では、ストリーミングオーディオをwatchOSに持ち込むことで、一般的な監視専用のユースケースにも対処しています。
ローカルファイル用にwatchOS 5でバックグラウンドオーディオ再生を導入しました。
そして今やwatchOS 6では、ネットワーク、フレームワーク、NSURLsessionStreamTaskそしてさらに多くのAVFoundationを利用可能にすることによってオーディオをApple Watchに直接ストリーミングするための3つの方法をもたらしました。
また、オーディオ再生、トレーニング、ナビゲーション以外にも、タスクを完了するためにアプリの実行順序を維持する必要があるユースケースがあることも認識しています。
たとえば、瞑想セッションです。
watchOS 6では、ユーザーが手首を下げた後でも、より多くのアプリを実行し続ける方法を提供する新しい拡張ランタイムAPIを導入しています。
これにより、セルフケア、マインドフルネス、理学療法、スマートアラーム、ヘルスモニタリングにおける新しいアプリ体験が可能になります。
それはたくさんの新しいAPIと機能です。
魅力的なユーザーインターフェースを作成するための選択肢が他にもあるのであれば、そうでしょうか。
私たちはあなたが何年もの間、より高度なUIフレームワークを求めてきたことを知っています。
そしてwatchOS 6では、ついにSwiftUIのものができました。
【拍手】
あなたはすでにiOSでSwiftUIを見ました。
美しいユーザーインターフェースを定義するための同じ宣言型言語は、watchOSでも利用可能で、プラットフォーム上で可能なことを拡張します。
スワイプ付きのリストから削除、並べ替え、カルーセルファイリング、直接アクセス、デジタルクラウンまで、魅力的な時計体験を作成するのはこれまでになく簡単です。
SwiftUIを使って新しい独立型アプリの機能を利用する方法を説明しましょう。
さて、私はここでシミュレータで私の旅行アプリを走らせています、そして私はSwiftUIを使ってそれを更新し始めたので、それは素晴らしく見え始めています。
しかし、私の「サインイン」ボタンは現在iPhoneにサインインするようにユーザーに要求しているだけなので、レイアウト以外にもやるべきことがいくつかあります。
そして私のユーザーは私に彼らが望むものではないと言った。
彼らは自分の手首ですべてを正しくできるようにしたいのです。
だから私はシミュレータを終了し、私のプロジェクトファイルに行くつもりです。
そして、私は自分のTravel Watch拡張機能ターゲットに移動し、iOSアプリをインストールせずにサポートを実行するボックスをチェックして、電話からの独立を宣言します。
次に、すでに開始した[サインイン]ビューに移動します。
プレビューを再開します。
すばらしいです。
そして、ここにサインインボタンと2つのプレビューがあります。
一番上のものは私が話す言語である英語のためのものであり、一番下のものは私のアプリを右から左への言語であるアラビア語にローカライズすることで実験し始めています。
だから私がやろうとしている最初のことは私のユーザー名ボタンのフィールドを追加することです。
そしてこれを私のおっとに結び付けるつもりです。
値が変わるとフィールドが更新されるように、私のユーザー名の状態にします。
プレースホルダのテキストをusernameに設定したので、このフィールドで何をするべきかをユーザーに理解させる機会を与えます。
また、継続キーボードを使用するときにパスワードとユーザー名の自動入力が機能するように、コンテンツタイプをusernameに設定しました。
次にパスワードフィールドを追加します。このために、パスワードを入力しているときに他のユーザーが私を覗き見しないように、安全なフィールドを使用します。
繰り返しますが、これを自分のパスワード状態にバインドします。
パスワードのプレースホルダテキストを持っていますが、ここでも自動入力の目的でコンテンツタイプのPasswordを使用しています。
だからそれは英語とアラビア語の両方で素晴らしく見えます。
アラビア語の場合は、ローカライズ可能なstringsファイルから文字列を取り出します。
これはプレースホルダーのコンテンツではありません。
はい。
この上に、私がやりたいのはAppleボタンでサインインすることです。ユーザーが本当にサインインしようとしているのだと思うからです。
それで、今私はそれを一番上に置いて、それからセパレーターを加えます、それでユーザーが彼らのApple IDでサインインするか、または私のアプリのために顧客ユーザー名とパスワードを作成するオプションがあるのは明らかです。
それは素晴らしいですね。
最後のステップは、ホスティングコントローラに移動して、プレゼンテーションボタンの表示先を、[iPhoneでサインイン]ビューではなく、作成したばかりの[サインイン]ビューに変更することです。
それで、私はそのようになりました、そして今私はライブプレビューをオンにしたいです、それで私のすべてのボタンはインタラクティブになります。
サインインボタンをクリックすると、フォームが表示されます。
Appleでサインインするか、ユーザー名とパスワードでサインインします。
それは素晴らしいですね。
そして、それがSwiftUIを使ったApple Watchでのサインインフォームの作成です。
【拍手】
はい。
それで、あなたは素晴らしい独立したApple Watch経験を築くためのツールを手に入れました。
摩擦を最小限に抑えて、アプリをどのようにして顧客の前に配置するのですか。
App StoreとApple Watchは、App Storeのトップレベルでのコレクションの収集と編集による選択を通じて、優れた独立系アプリケーションを紹介します。
ここでは、独立したアプリを強調しているので、ユーザーは自分の素晴らしいアプリをダウンロードしてすぐに使い始めることができるかどうかにかかわらず、携帯電話を持っているかどうかに関係なくすぐに利用できます。
そして、個々の製品ページに飛び込むと、これは単なる経験の縮小ではないことがわかります。
ユーザーは、フル機能のアプリの説明、スクリーンショット、レビューなどを見ることができます。
彼らは口述や落書きでアプリを検索することができます。
現在の監視にとって意味のあるアーキテクチャとアセットのみで小さなバンドルを提供することを可能にするアプリとアセットの間引きのおかげで、彼らはあなたのアプリを手首に直接ダウンロードすることができるでしょう。
あなたがiOSとwatchOSの両方のアプリを持っているならば、我々はもはや電話に監視バンドルをダウンロードしてそれからそれをやり直さないので、これはあなたのiOSアプリも小さくするでしょう。
これは、Apple Watchアプリがこれまで以上に機能的で、美しくそして独立したものになるための全く新しい時代です。
私たちはあなたとあなたの顧客の両方がこれを気に入ると思います。
そして今、私たちが独立を宣言したばかりのプラットフォームについて話すために、私はCindyをステージに歓迎したいと思います。
【拍手】
>>ありがとう、ロリ。
iOS 13は大きなリリースです。
今朝、私たちは再設計されたシェアシート、Quick Typeキーボード、そしてまったく新しいCarPlay体験のようなたくさんの新機能と強化を持っていることを見ました。
そのすべてに加えて、私たちはUIをよく見直して、iOS 13にまったく新しい外観を与えました。
この新しい外観には、ダークモード、カード、状況に応じた動作、およびシンボルが含まれています。
信じられないほどクールな新しいダークモードに飛び込みましょう。
ダークモードは明るさを抑え、Chromeを邪魔にならないようにしてコンテンツだけに集中できるようにします。
システム全体が本当に思慮深く更新され、素晴らしいように洗練されました。
あなたのユーザーは間違いなくこれを望んでいるでしょう。
そして、あなたがあなたのアプリにこれらの同じ洗練をもたらすのを助けるために、我々はDarkモードを念頭に置いて特別に設計されたいくつかの新しいAPIを作成しました。
しかし、最初は意味色です。
背景、塗りつぶし、テキストに新しい色があります。
また、ダークモードでは、アプリに視覚的な階層を持たせるための複数のバリエーションがあります。
今それはどういう意味ですか？
さて、あなたのアプリがフルスクリーンであるとき、その背景は真っ黒です。
十分なコントラストを確保するために、上記のUIはより明るいカラーパレットを使用しています。
iPadでマルチタスクを実行すると、スライドオーバーアプリとサイドバイサイドアプリもこれらの明るいレイヤーの色でレンダリングされます。
このデザインには多くのニュアンスがありますが、セマンティック色で自動的に得られます。
そして、ポップが必要なときには、システムカラーの鮮やかなパレットがあり、すべてにコントラストのアクセシビリティモードのバリエーションとダークモードのバリエーションがあります。
また、さまざまなレベルの透明度を備えたまったく新しい一連のマテリアルと鮮やかなコンテンツフィルタもあるため、あらゆるコンテンツに対して優れたUIを作成できます。
そして、セマンティックカラーと同じように、これらの素材は明暗両方のバリエーションをサポートします。
そしてそれらは自動的にUI Kitトレイトコレクションへの変更に基づいて更新されます。
セマンティックカラーとアダプティブマテリアルを採用すると、自動的にあなたの環境に適応する統一された外観を提供するのに役立ちます。
iOS 13の新しい外観のもう1つの要素はカードです。
オリジナルのSDK以来、iPhoneのデフォルトのプレゼンテーションスタイルは全画面をカバーしています。
私たちはそのデフォルトをもっと流動的なカードプレゼンテーションに変更しています。
カードは視覚的なスタックを提供するので、自分がプレゼンテーション中であることが一目でわかります。
さらに良いことに、それらは1回の下向きのスワイプだけで却下できます。
【拍手】
ええ
スワイプ
Peek and Popの経験も更新しました。
システム全体で状況依存のアクションにアクセスするのがより迅速かつ簡単になりました。
そしてそれらは、すべてのデバイスにわたって動作するように設計された真新しいAPIによって支えられています。
そのため、iPhone上でこれまで以上に優れているだけでなく、iPad上でも見栄えがよくなります。
そして、あなたがあなたのiPadアプリをmacOSに持ってきたとき、彼らはそこに素晴らしく見えるでしょう。
【拍手】
ええ
私たちがシステムを見ていて、それらすべてを思慮深く洗練させながら、私たちはシンボルについて考え始めました。
ほとんどのアプリはシンボルを使います。
それらは情報を伝達するための本当に便利な方法です。
そして、シンボルはテキストと共に非常によく使われます。
しかし、テキストには、iOS 12では私たちのシンボルにはなかった優れた特性がいくつかあります。
あなたがここで見ることができるように、テキストは動的な型サイズが増加するにつれてうまく拡大しています、しかしシンボルは同じままでした。
理想的には、シンボルをテキストに合わせて拡大縮小します。
そこで私たちはSFシンボルを作りました。
SFシンボルはフォントの表現力と振る舞いをすべて備えていますが、UIイメージとしてパッケージ化されているので、アプリでは非常に使いやすくなっています。
iOS 13には、1,500以上のSFシンボルのカタログがあります。
そしてそれらはXcode内で、そしてあなたのMac上のスタンドアロンのSFシンボルアプリを使って簡単に検索することができます。
【拍手】
シンボル
 [笑い]
これで、シンボルがテキストとともに拡大縮小され、読みやすくなり、サイズが大きくなってもレイアウトがより一貫したものになります。
そして、それらはフォントのように振る舞うので、これらすべてのウェイトで利用可能です。
【拍手】
これらすべては、iOS 13で利用可能なものの表面を傷つけているだけです。
アプリに受信者の提案を許可するための新しい共有シートAPIがあります。
コレクションビューをこれまで以上に使いやすくするための新しい構成レイアウトAPI。
スクリーンショットの機能強化により、アプリは長いコンテンツの全ページビューを提供できます。
そしてそんなに多く。
そして、これらすべてに加えて、今年はiOSをさらに進化させたいと考えました。
そのため、マルチタスク処理、PencilKitの新しいフレームワーク、そして一連の生産性向上のジェスチャを大幅に強化した独自のオペレーティングシステムを提供しました。
マルチタスクから始めましょう。
iPadOSでは、スライドオーバースタックだけでなく、同時に複数のスペースでアプリを開くことができ、各スペースに異なるコンテンツを表示できます。
これを可能にするために、我々は新しいUIウィンドウシーンAPIを導入しています。
各ウィンドウシーンは、アプリのUIの単一のインスタンスを表します。
iPadOSより前は、あなたのアプリデリゲートはそのプロセスとUIライフサイクルの両方を担当していました。
ウィンドウシーンでは、そのUI部分を新しいシーンデリゲートオブジェクトに分割して、独立して管理できるようにします。
また、これらは完全に独立しているため、アプリは同時に複数を管理できます。
ユーザーはドラッグアンドドロップを使用して、単一のウィンドウやメッセージなど、アプリの個々のアイテムを新しいウィンドウシーンで開くこともできます。
この新しい機能を使用すると、ユーザーはいつでもあらゆるシーンで行っていたことを再開できることが非常に重要です。
これを簡単にするために、NSUserActivityに基づく新しい状態復元システムを構築しました。
あなたはおそらくすでにこの多用途のAPIに精通しているでしょう。
これは、ハンドオフ、検索、インデックス作成、Siri、そして今ではウィンドウシーンの状態の復元に使用されます。
本当に設定することの一つ - あなたは拍手することができます、それは結構です。
【拍手】
iPadを際立たせるものの1つがApple Pencilです。
私たちはあなたがあなたのアプリにスムーズで低レイテンシの描画を簡単に追加することを可能にするPencilKitを導入しています。
これは、ノート、マークアップ、スクリーンショットなどのアップルのアプリで使用されているものと同じエンジンです。
それで、あなたはあなたのアプリでまさにそれらの同じ機能とツールの全てを手に入れます。
キャンバスとパレットの機能を別々に使用して、ユースケースに適したピースを選択して選択することもできます。
最後に、生産性のしぐさについて話しましょう。
テキストの選択がずっと簡単になりました。
テキストを指でドラッグして選択できます。
テキストビューとWebビューは、この新しい選択ジェスチャで自動的に更新されます。
また、元に戻すとやり直すための新しい3本指ジェスチャがあります。
元に戻すには3本の指を左に、やり直しには右の指をスワイプします。
これらの新しいジェスチャーは既存のNSUndoManagerを使用するので、採用するために何もする必要はありません。
テキストビューやWebビューの外で簡単にテキストを選択したい場合、またはアプリケーションで既に3本指のジェスチャを使用していて競合がある場合は、UITexInteraction APIを使用してこれらの問題を解決できます。
スクロールビューの場合は、スクロールインジケータをドラッグしてスクロールビュー内の場所に直接ジャンプできます。
この振る舞いを有効にするには、単にShow Scroll Indicatorsをオンにします。
このためには、フレーム内のすべてのセルを同時にロードする必要がある可能性があるため、スクロールが効果的であることが本当に重要です。
私達は私達のユーザーがiPadOSが彼らに与える強力で新しいものを好きになるだろうと思っています、そして私達はあなたがそれをどうするか見るのを待つことができません。
それで、私はSebastienが舞台に戻ってくるのを歓迎したいです。
【拍手】
>>ありがとう、シンディ。
これまで見てきたように、当社の各プラットフォームには、それぞれが提供するエクスペリエンスを洗練させ、優れた新機能を提供する、驚くべき新機能があります。
そして、私たちのすべてのプラットフォームで、最新のテクノロジをアプリケーションに組み込むことができるように、あなたのアプリケーションに大きな先駆けを与えるように設計された一連のテクノロジを構築しています。
今日の午後に焦点を当てたいものがいくつかあります。それらは、私たちがプラットフォームやアプリを開く方法からすべてのユーザーに至るまで、仮想および実世界を拡張現実と組み合わせる方法まで、かなり広い範囲の機能をカバーします。
それで私たちはアクセシビリティから始め、それを行うために私はステージ上でEric Seymourを歓迎したいと思います。
エリック？
【拍手】
>>ありがとう、Sebastien。
だから私たちは皆、テクノロジーが人々の生活の中で強力な役割を果たすことを知っています。
しかし、これは障害を持つ人々に特に当てはまります。
テクノロジーは、自立、雇用、そしてエンパワーメントを促進するのに役立ちます。
アップルでは、​​私たちはアクセシビリティのためのいくつかの重要な原則に導かれ、それはアクセシビリティが組み込まれていることから始まります。
人々は箱から出してすぐに私たちの製品を使うことができるはずです、そしてそれはすべての能力の人々を含みます。
アクセシビリティは包括的であるべきです。
人々はプラットフォーム全体、OSの隅々、アプリケーションの隅々までアクセスできるはずです。
そしておそらく最も重要なのは、能力に関係なくすべてのユーザーを驚かせて喜ばせたいということです。
だからこれは単にアクセシビリティのバグを修正することだけではありません。
これはあなたの機能をアクセシビリティと一緒に使い、素晴らしい経験を目指して努力することです。それはあなたのオリジナルのデザインと同じくらいインスピレーションを得たものです。
アクセシビリティについて考えるとき、私たちは本当に幅広い能力の連続について話しています。
聴覚、視覚、身体、学習
そして、これらの分野のそれぞれにおいて、私たちはさまざまな条件に焦点を当てています。
そのため、たとえばビジョンのために、私たちはもちろんスクリーンを見ることができない人のための私たちのスクリーンリーダーVoiceoverを持っています。
しかし、ズームから大きなテキストまで、10を超えるビジョン関連の機能もあります。
そして私たちがこのアプローチをとり、それをその幅広い連続した能力に適用するとき、私たちは何十ものアクセシビリティ機能について話しています。
そしてそれは、アクセシビリティがすべての人にとってのものであるという概念を本当に強調しています。
おそらくあなたのほとんどは少なくとも1つのユーザー補助機能を使用しています。
そして、あなたがまだしていないのであれば、結局あなたがそうする可能性が高いです。
今年は、いくつかの新しいアクセシビリティ機能と機能強化を紹介します。今日は、発見可能性から始めて、2つについて説明します。
アクセシビリティというのはすべての人のためにあるという精神のもとに、見つけやすくするためのものでした。
そしてそのために、iOSクイックスタートにアクセシビリティを追加して、すぐに使えるエクスペリエンスをさらにアクセスしやすくしました。
また、ユーザー補助機能を最上位の設定に移動しました。
【拍手】
そして、私たちは物事を見つけやすくするためにそれを再編成しました。
私たちは、人々がこれらのすばらしい機能を見つけて使用するのを助けるために長い道のりを行くだろうと思います。
それでは、音声制御について説明しましょう。
私たちは今朝基調講演の間にこれを見ました。
音声制御は、macOS、iOS、およびiPadOSによるこの完全な音声エクスペリエンスであり、身体的な問題を抱えている人々にとっては本当に役立つと考えています。
音声制御は包括的なプラットフォームアクセスを提供します。
あなたは名前でアイテムに話すことができます。
番号でアイテムを参照できます。
あなたはグリッドを使ってスクリーンの領域と話すことさえできます。
音声制御は素晴らしいテキスト編集を得ました。
だから私はもちろんテキストを口述することができますが私は私の声だけを使って選択や修正をすることもできます。
そしてそれはまた意識を持っています。
だから私がテキストを口述している時でさえ効果的にそれは命令を聞きます、そしてそれは私がその区別を管理するようにしません。
私はそれについて話すことができます。
そして本当の深さのカメラを使って、私が目をそらすならば、それは私を無視することができることを知っています。
音声コントロールは素晴らしい音声ジェスチャーを持っているので、もちろんタップやスワイプのような簡単なことができます。
しかし、この回転ジェスチャーのように、アプリやゲームで使用したいと思うより複雑なジェスチャーを事前に記録することもできます。
そしてもちろん、音声制御音声認識は完全にデバイス上で動作します。
そして今、私はあなたに音声制御の動作を見せたいのです。
【拍手】
そしてこのデモのために私は私のiPhoneと話をするつもりです。
メッセージを開く
こんにちはクリス、今夜の夕食をつかみましょう。
私はピザを考えています。
ピザ絵文字。
今週末に今週を変える。
送信をタップします。
元に戻します。
送信をタップします。
[ 笑い ]
元に戻します。
送信をタップします。
【拍手】
マップを開きます。
検索欄をタップします。
サンペドロ広場。
数字を表示
五。
継続的にグリッドを表示します。
 15。
一つにズームしてください。
4回繰り返します。
【拍手】
27で上にスワイプします。
グリッドを隠す
共有をタップします。
Chris Adamsをタップします。
この辺りにはたくさんのオプションがあります。
じゃあまたね。
平和絵文字。
ああ、それを見てください。
元に戻します。
平和絵文字。
送信をタップします。
[ 笑い ]
元に戻します。
送信をタップします。
【拍手】
家に帰りなさい。
寝る。
はい。
これが音声制御です。
今 -  [拍手]
開発者として音声制御を使用して、アプリのアクセシビリティをテストすることもできます。
それでは、先ほど見たことのある旅行アプリを使って、今それをやりましょう。
目を覚ます。
オープントラベル
サンフランシスコをタップします。
サンフランシスコをタップします。
名前を表示する
大丈夫、これが問題です。
それで、私はサンフランシスコ、この要素を利用しようとしています、しかしそれはまだ良いアクセシビリティラベルを持っていません、そしてそれは本当に一般的な問題です。
それは私が音声制御でこの要素と話すことができないことを意味します、そしてさらに悪いことに、スクリーンが見えずVoiceoverが私にこれを読んでいないならば、私は完全に運が悪く、私のトラックに止まります。
私はこのアプリを使うことができないでしょう。
とても幸いなことに、これらのことは修正するのがとても簡単です。
それでは、アプリをより使いやすくするためにできることについて説明しましょう。
幸いなことに、アクセシビリティ機能のほとんどは機能します。
しかし、そのうちのいくつかは、確かにVoice ControlやSwitch Control、Voiceoverのような最も変革的な機能であり、あなたのサポートが必要です。
そして、これがあなたができることです。
まず、今行ったことを行います。
やってみなよ。
ユーザー補助機能付きのアプリを使用してください。
あなたは実際にすでにうまくいっていることに驚くかもしれません。
しかし、もっと重要なのは、何人かのユーザーが実際にアプリを体験する方法について貴重な洞察を得ることです。
そして、おそらくいくつかの変更を加えたいと思うでしょう。
次に、ツールを使ってください。
Xcodeは開発者向けの優れた組み込みのアクセシビリティサポートを持っています。
アクセシビリティプロパティはXcodeインスペクタで直接編集できます。
また、新しいEnvironment Overridesを使用すると、開発ライフサイクル中に視覚的なユーザー補助機能をアプリ内でプレビューできます。
本当にかっこいいです。
最後に、アクセシビリティAPIを実装します。
アクセスしやすいエクスペリエンスを確保するための最善の方法です。
それは本質的な方法です。
これをうまくやることは、あらゆる能力を持つユーザーのためにあなたのアプリにウェルカムマットを出すことのようなものです。
VoiceoverとSwitch Control、そしてそれ以外があなたのアプリと会話して適応した体験を提供するのです。
アクセシビリティAPIはすべてのプラットフォームで機能し、実装は簡単ですが、非常に強力です。
そのため、最も洗練されたアプリやエクスペリエンスでも完全にアクセス可能にすることができます。
そしてもちろん、SwiftUIには優れたアクセシビリティサポートが組み込まれています。
そして、それが今日の私たちのアクセシビリティアップデートです。
今私達がアップルで深く気にしているもう一つのことはプライバシーです。
そしてそれについてもっとお話しするために、Katieに物を渡したいと思います。
どうもありがとう。
【拍手】
>>ありがとう、エリック。
プライバシーは消えないトピックです。
そしてそれは皆が注意を払う必要があるということです。
それはあなたが最初からデザインしなければならない何かであり、そしてそれはあなたの製品がどのように働くかを形作る。
新しい機能を設計するときは、プライバシーを考慮して設計するためのいくつかの手順を次に示します。
ユーザーのデバイス上で処理します。
ユーザーデータをデバイスに保存できる場所であれば、いつでも実行できます。
そしてこれはあなたができる限り少ないデータを集めるのを助けます。
あなたがデータを持っていなければ、それは悪用されたり盗まれたりすることはできません。
最初に聞いてください。
データとその使用方法について、ユーザーから許可を得てください。
また、データを収集する場合は、ランダムな識別子を使用してください。
また、アカウントからデバイス、可能であればセッションまでを範囲とします。
ユーザーのデータを安全に保つために暗号化します。
設計プロセスでこれらの原則を適用すると、優れた機能と優れたプライバシーを構築するのに役立ちます。
私たちはあなたがこれらのステップを踏むことをより簡単にした2つの分野について話したいと思います。
まず、場所です。
あなたがどこへ行くかはあなたの人生について多くを明らかにすることができます。
あなたが住んでいる場所、あなたが仕事をしている場所、あなたが行くかもしれない医者の診療所、あるいはあなたがジムにぶつかる頻度対バーかもしれません。
このため、何人かのユーザーはあなたとあなたのアプリと位置情報を共有することに躊躇しています。
だから彼らはあなたの重要な機能のいくつかを見逃してしまうかもしれません。
そのため、今年は新しいオプションを追加します。[Allow Once]です。
これはちょうどそのセッションのための位置アクセスを提供し、次回ユーザーにもう一度尋ねます。
ただし、常に場所を許可するアクセス許可を使用すると、アプリはさらに優れたものになります。
これが今どのように動作するかです。
最初にユーザーは「使用中」を選択する必要があります。
その後、アプリがバックグラウンドにある間に位置情報を要求します。
その後、ユーザーに警告が表示され、バックグラウンドで位置情報を要求していることをユーザーに知らせます。
[常時許可]に変更した場合は、バックグラウンドでの位置情報へのアクセス権があります。
最後に、ユーザーの所在地へのアクセス方法の透明性を高めています。
バックグラウンドの場所の許可を持つすべてのアプリについて、時々、アプリが場所にアクセスした場所を表示します。
【拍手】
これらのアクセス許可の変更により、ユーザーは自分と位置情報を共有している方法がより快適になります。
それでは、ログインについて話しましょう。
私達はみんなこれらのようなボタンを見たか、あるいは実装したかもしれません。
そしてそれらは本当に便利になることができます、しかしそれらはあなたのユーザーのプライバシーを犠牲にして来ることができます。
彼らはまたあなたが本当に開示したいと思うよりもあなたの会社の事業についてのより多くの情報を共有するかもしれません。
だから我々はより良​​い選択肢を提供したいと思います。
そしてそれはAppleとのサインインと呼ばれます。
【拍手】
すべての追跡がなくても、すばやく簡単にサインインできます。
これは私達のユーザーのためだけでなくあなたの会社のためのプライバシーについてだけではありません。
ユーザーがアプリとどのように関わっているかを知るのは私たちの事業ではないので、Appleは単にそれを追跡しません。
【拍手】
シンプルなAPIを使用して、Appleにサインインボタンをアプリに追加するのは簡単です。
ユーザーはアカウントを設定し、タップとクイックフェイスIDを使ってアプリにサインインできます。
それで、なぜこれはあなた全員にとって素晴らしいのですか？
第一に、信頼性が高まり摩擦が少ないということは、より多くのユーザーが関与することです。
アップルではあなたのアプリケーションを検討して実際にそれを採用しているユーザーとの距離を縮めることができます。
次に、メールアドレスを確認します。
AppleはすでにあなたのためにEメールアドレスを確認する仕事をしました。
【拍手】
また、プライベートのEメールリレーサービスを提供することで、ユーザーがメークアップEメールアドレスを共有する動機を取り除きます。
そのため、アカウントの設定時にユーザーが自分の電子メールアドレスを非表示にすることを選択したとしても、あなたの電子メールは確認済みのアカウント、確認済みの受信トレイに届きます。
そしてセキュリティがあります。
Appleにサインインすれば、パスワードの保存やパスワードリセットの問題に対処する必要はありません。
また、すべてのアカウントは2要素認証で保護されています。
【拍手】
これは本当にあなたのセキュリティを向上させることができます。
私たちはまた、不正防止に関するいくつかの興味深い革新を統合しました。
私たちは皆、何人かの本当のユーザーと一緒に、時々あなたはそれほど実際ではないユーザーを得ることを知っています。
誰もボットや農場のアカウントを望んでいません。
そして私達は私達のシステムからそれらを除外するために一生懸命働きます。
そして、私たちはあなたが同じことをするのを助けたいです。
そこで、私たちは本当のユーザーインディケータと呼ぶものを作りました。
入ってくるアカウントが本物のユーザーなのか、それとも追加の確認をしたいのかを教えてくれます。
それで、これはどのように機能しますか？
まず、システム全体がユーザーのプライバシーを守るためにゼロから構築されます。
発信元デバイスが通常の方法で動作しているかどうかを判断するために、オンデバイスインテリジェンスを使用します。
デバイスは、アップルと詳細を共有せずに値を生成します。
これは選択したアカウント情報と組み合わされ、アカウント設定時にアプリと共有される単一の値にまとめられます。
それから、あなたが受け取る価値次第で、あなたはあなたの新しいユーザーが本当のユーザーであることを確信するか、またはあなたが見直すことを望むかもしれないというシグナルを得ることができます。
そしてこれらすべてに、優れたクロスプラットフォームサポートが付属しています。
iOS、iPadOS、macOS、watchOS、tvOSで利用可能で、Web上でも動作します。
だからそれはAndroidとWindowsデバイス上で動作することができます。
【拍手】
だからそこに行きます。
新しいユーザー、2要素認証、および不正防止機能が組み込まれた超高速で簡単な方法。
あなたは事実上どこにでもそれを実装することができます、そして最も重要なことに、それは皆のプライバシーを尊重します。
だからこれはあなたとあなたのユーザーの両方が信頼できる解決策です。
私たちはすでに多くの開発者と協力していますし、もっと多くの開発者が採用するのを楽しみにしています。
これがAppleのサインインです。
【拍手】
前述したように、ユーザーのプライバシーを保護するための優れた方法は、デバイス上のユーザーのデータを操作することです。
そして、それを実現するための優れたテクノロジをいくつか構築しました。
機械学習についてさらに詳しく説明するために、Billに渡します。
【拍手】
>>ありがとう、ケイティ。
【拍手】
機械学習は、アプリのさまざまなエクスペリエンスにとって重要なテクノロジです。
そしてアップルでは、​​すばらしいカメラや写真の機能からAR Kitなどの機能まで、オンデバイスの機械学習を使用しています。
最先端のシリコンのおかげでこれが可能になります。
Neural Engineのような強力なCPU、GPU、および専用MLプロセッサを使用すると、信じられないほどのリアルタイムエクスペリエンスを実現できます。
Neural Engineは、多精度サポートとSmart Computeシステムを使用して畳み込みニューラルネットワークを高速化するように最適化されています。
どういう意味ですか？
それは絶対的な獣だということです。
実際、Neural Engineは1秒間に最大5兆回の操作が可能です。
何よりも、私たちはあなたのアプリがこの素晴らしいパフォーマンスを最大限に活用できるように、これに加えて私たちの機械学習APIを構築しました。
また、Vision、Natural Language、Speechなどのすぐに使えるAPIから始めて、素晴らしい更新がいくつかあります。
今日、これらのAPIは、顔検出、オブジェクト追跡、名前付きエンティティ認識などの豊富な機能を提供します。
そして今年、私たちはさらに追加しています。
重要なオブジェクトを強調し、ユーザーが注目を集める可能性がある部分を強調して、画像の重要性を明確にすることから始めて、これらのいくつかを見てみましょう。
私たちは今日キュレーション体験の一部として画像を知的にトリミングするのを助けるために写真でこれを使います。
ポスター、サイン、文書などの画像からテキストを検索できるテキスト認識機能もリリースしました。
【拍手】
また、Notesで使用する書画カメラ機能を活用してください。
自然言語の場合は、単語や文章を識別するのに役立つ単語の埋め込みを利用できます。
あなたがミュージシャンのような未知の用語を検索する場合、私たちは芸能人や歌手のような代替案を提案できるように、私たちは今日写真の検索にこれを使います。
そして今年、私たちのSpeech APIは現在デバイス上にあり、iPhone、iPadそしてMac上で動作し10の言語をサポートしています。
【拍手】
そして、Speech Saliencyのような機能を使って、発音、ピッチ、そしてスピーチのケイデンスを理解することができます。
機械学習をより深く学びたい方のために、高性能とプライバシーを備えた機械学習モデルを実行するために設計された当社のオンデバイステクノロジであるCore MLを利用することができます。
今日のCore MLは、ニューラルネットワークからブーストツリーなど、多くの機械学習モデルをサポートしています。
しかしあなたが知っているように、機械学習の分野は絶えず進化しています。
そこで今年は、これまで以上に多くのレイヤータイプを追加することで、最先端のニューラルネットワークをサポートすることを目指しました。
実際、Core MLは現在100を超えるモデルレイヤタイプをサポートしています。
これにより、アップルデバイスで最先端の機械学習モデルをいくつか実行することができます。
ELMOやWaveNetのようなモデル、あるいはBERTのようなごく最近公開されたモデルはあなたのアプリに画期的な自然言語処理をもたらします。
アプリでこれらのモデルを実行することは、ストーリーの一部に過ぎません。
ユーザーデータに基づいて、デバイス上のアプリのモデルを更新したい場合があります。
フェイスIDのように、ユーザーの外観が時間の経過とともに変化する可能性がある機能のために今日これを行います。
彼らは髪を変え、帽子をかぶります。
または、Siri Watch Faceのように、各ユーザーにパーソナライズされたエクスペリエンスを提供するために一連の推奨事項が絶えず進化している機能のために。
これらの経験を達成するために、我々はデバイス上のパーソナライゼーションを使用します。
そして今年、私たちはその機能をコアMLにもたらします。
つまり、個々のユーザーからのデータを使ってアプリ内のCore MLモデルを更新できます。
これは作成します -  [拍手]
これにより、ユーザー用に更新されたパーソナライズモデルが作成されます。
モデルのパーソナライズにより、アプリはユーザーのプライバシーを損なうことなくバックグラウンドでモデルを更新できるようになりました。
Core MLは、機械学習モデルのための最も先進的なプラットフォームを提供します。CoreMLは、ほんの数行のコードでモデルを構築できるように設計されたフレームワークです。
そして今年は、さらにCreate MLを採用しています。
Macから、コードなしでモデルを構築できるmacOSアプリになりました。
【拍手】
データに合わせて、さまざまなモデルテンプレートから選択できます。
異なるデータセットを使用して複数のモデルを構築し、それらのモデルごとにパラメータを定義できます。
モデルトレーニングに関するリアルタイムのフィードバックを得ることができます。
また、Create MLは、画像分類やテキスト分析などのタスクのための転送学習をサポートしています。
必要なデータが非常に少なく、アップルの最適化された高度に事前トレーニングされたモデルを利用できるため、これによってトレーニングがスピードアップします。
そして、モデルの実験とプレビューができます。
例えば、あなたはあなたのMac上で継続的にあなたのiPhoneのカメラを使うことによって画像の予測を得ることができます。
または、Macのマイクを使ってサウンド分類モデルをテストすることもできます。
それで、それは新しいもののトンです、そして、私たちはあなたがこれらすべての素晴らしい新しい機械学習能力で何ができるかを見るのをとても興奮しています。
実際、私たちは何人かの開発者を招待してすべての新しいものを試してみました。そして驚くべき結果を見ました。
特にクールだったので、私たちはあなたとそれを共有しなければならないと決めました。
それで、あなたに彼の新しいアプリNoisyBookのプレビューを与えるためにLumen DigitalからベンHarrowayを歓迎してください。
【拍手】
>>ありがとう、ビル。
こんにちは、みんな、私はLumen DigitalのBenです。私は真新しいアプリNoisyBookに取り組んでいます。
話をさせてください。
むかしむかし、美しい牧草地で、ジャックと彼の牛デイジーという男の子が住んでいました。
デイジー
[牛の係留]
神秘的な男が彼らにいくつかの魔法の豆を渡し、それが雲の高いところで巨大な豆の木に成長しました。
[神秘的な音楽]
さて、私は誰もがこの話を知っていると思います。
本当に違うことを試してみましょう。
突然爆発するチキンと彼の友人の黄金の虎[うなる]
彼らのヘリコプターに飛び込んだ[旋風]
そして森に飛び込んだ。
[クリケットと鳥の音]
そしてもちろん、どう思いますか？
彼らは皆、その後ずっと幸せに暮らしていました。
[音楽]
>>はい。
>>あなたは物語の中で聞いた動物の音を立てることができますか？
>>わかりました、私達はある楽しい時を過しました。
今やNoisyBookは私達が物語の間に聞いた動物の音のいくつかを繰り返すことを私たちに望んでいます。
私たちはこの話で牛を聞いたと思うので、これを試してみましょう。
武。
彼がいます。
私がここに立っているのは、これらの人々全員の前で動物の音を立てるとは本当に信じられません。
マッド。
しかし、驚くほど素晴らしいことに、このアプリは実際にそのノイズを認識し、それを認識するために音声分類モデルを使用しました。
あなたはまた、NoisyBookが伝統的な物語と私たち自身の想像から直接物語の両方で働くことができたのに気付いたでしょう。
超強力です。
そして、iOS 13およびCreate MLのスピーチ、サウンド、およびCore MLの新機能のおかげで、これはすべてデバイス上で行われています。
これはすべてリアルタイムで行われており、私が9万行以上のテキストでトレーニングした自然言語モデルを使用しています。
そしてこれらの機能のおかげで、私は約2年間苦労したという考えを持ち、ほんの2、3日で本当にこれらの魔法の新しい機能のいくつかを実装することができました。
私はそれを非常に誇りに思っています、そして、それが今年遅くにApp Storeに上がるとき、あなたがNoisyBookをチェックアウトするのを忘れないことを願っています。
ありがとうございました。
【拍手】
>>ありがとう、ベン。
それは本当にクールでした。
私の子供たちはそれを愛するつもりです知っています。
今Appleで機械学習の最大の用途の1つはSiriです。
Siriは世界で最も人気のあるインテリジェントアシスタントであり、毎月5億を超えるアクティブデバイスを持ち、150億を超える要求を出しています。
これらは驚くべき数字です。
そしてSiriはAppleのすべてのデバイスに渡って機能します。
Siriを使用すると、ユーザーは新しい方法でアプリと対話できます。
外出先では、Air Podsを使用すれば、部屋のどこからでも、車の中からでもハンズフリーで使用できます。
そして何千ものアプリがSiri Shortcutsを通してSiriと統合されています。
Siriのショートカットを作成して、あなたがあなたのアプリに既に持っている機能をほんの少しの作業であなたのユーザーのために発見可能な方法で公開できるようにしました。
自分のショートカットを[Siriに追加]ボタンを使用して検出可能にし、ユーザーが音声でアプリを使用する方法についてユーザーを教育することができます。
それ以外の点では、音声機能を発見するのは本当に難しいからです。
また、ユーザーがフレーズを録音する必要がなくなるように設定を簡素化しました。
あなたはフレーズを提案し、彼らはタップでそれを追加します。
【拍手】
そして、今年の最大の要望は、ショートカットのパラメータをサポートすることでした。
そこで、Siriで質問を通してユーザーがあなたのアプリと対話することを可能にする会話型のショートカットを作成しました。
たとえば、料理するものを選択した場合は、レシピアプリのPanaでショートカットを実行して、お気に入りのすべてのリストを表示できます。
リストから選ぶと、それはレシピに連れて行かれてプレイを始めます。
そして今年、ショートカットアプリはiOSとiPadOSに組み込まれています。つまり、すべてのユーザーが試してみる機会があります。
そして、そのアプリはあなたのアプリからのショートカットの本拠地になりました。
そして一般的な要求により、自動化のサポートを追加しています。
【拍手】
これにより、ユーザーはショートカットをいつ実行するかについて特定のトリガーを設定できます。
そして、選択肢はたくさんあります。
Apple Watchでワークアウトを開始したとき、CarPlayなどに接続したときなど、時刻に基づいてショートカットを起動できます。
また、エディタを使用して、パラメータを介してアクションの内外に情報を渡す機能など、アプリケーションのアクションを完全に設定できます。
これにより、アプリのアクションを他のアプリのアクションとマルチステップのショートカットで組み合わせることができます。
家族のために夕食をとる必要があるとしましょう。
子供たちは空腹です、あなたは早くそれが必要です。
Caviarアプリを使って、レストランの選択、食事の選択、注文の実行、そして家族全員に夕食の予定と到着予定時刻のテキストを表示するショートカットを作成できます。
それはあなたのアプリの力をSiriのショートカットと組み合わせることで日常の仕事を本当に簡単にすることです。
そしてもちろん -  [拍手]
そしてもちろん、ショートカットはiPhone、iPad、Apple Watch、そしてHomePodでも使えます。
それがSiriの更新です。
【拍手】
それでは、拡張現実の最新の進歩についてJeffにお伝えしたいと思います。
ありがとうございました。
【拍手】
>>ありがとう、ビル。
私は拡張現実について話すために今日ここにいることに興奮しています。
ARを使用すると、困難、高価、または不可能なことを視覚化することができます。
そしてAR Kitを導入して以来、私たちはアプリケーションの驚くべき成長を見てきました。
ARは娯楽のためだけのものと考えるかもしれませんが、教育、企業、商取引などで優れたアプリケーションを見てきました。
コマースは、Home Depot、Target、Wayfairで特に印象的なユースケースであり、すべてARでプレビューできる製品が数万点あります。
AR KitはUSDZファイルフォーマットとQuick Lookを一緒にホストし、世界初のマスマーケット拡張現実感コマースソリューションを作ります。
実際、Wayfairは、人々が自分たちの製品を拡張現実感で見ると、購買が3倍以上に増加していると見ています。
そしてこれが本当のビジネスユースケースであることを私たちは大好きです。
これは、商取引における拡張現実のための素晴らしい実際のビジネスユースケースです。
Apple Payは今秋、AR Quick Lookと直接統合されることを発表することで、この勢いを継続したいと思います。
これにより、消費者は拡張現実から直接これらの眼鏡のような商品を試着して購入することが容易になります。
iOSおよびiPadOS用のAR Kitは、世界で最大の拡張現実プラットフォームであり、何億もの対応デバイスがあります。
そして、私たちは多くの開発者から聞いた、彼らはこの素晴らしい機会を利用するのが大好きですが、どこから始めるべきか確信が持てないかもしれません。
また、3Dを使ったことがないのであれば、3Dは少し威圧的です。
さて、私たちは耳を傾けてきました、そして拡張現実アプリケーションを開発することをはるかに容易にする3つの技術を発表することに本当に興奮しています。
AR Kit、RealityKit、Reality Composerを組み合わせることで、拡張現実アプリケーションとエクスペリエンスを迅速かつ容易に開発するために必要なフレームワークとツールが提供されます。
Reality Composerから始めて、これまで3Dで作業したことがなくても魅力的なARエクスペリエンスを作成できます。
それは直感的にわかります、あなたが見るものはあなたがXcodeとシームレスに統合するインターフェースを得るものであるということです。
そしてReality Composerを紹介するために、同僚の一人であるShrudiをステージに招待したいと思います。
【拍手】
>>ありがとう、ジェフ。
ここにいられてうれしい。
私はハワイの本島で提供されるいくつかの活動を示すこの素晴らしい旅行アプリを持っています。
ユーザーがヘリコプターツアーを選択した場合、アプリはヘリコプターのパスを表示します。
実際のツアーの感覚をユーザーに提供するためにARを使用するのはどうですか。
既存のアプリにボタンを追加してARエクスペリエンスを起動することでそれを実現できます。
その方法を見てみましょう。
まず、SwiftUIを使ってボタンを作成します。
そのボタンを既存のビューに追加します。
次に、Reality Composerで空のプロジェクトファイルを開き、それをXcodeにドラッグアンドドロップするだけでXcodeプロジェクトに統合します。
このReality Composerプロジェクトファイルから自分のARシーンを読み込むために、RealityKitをインポートしてからARの新しいビューを作成します。
おっとっと。
ごめんなさい。
SwiftUIを使用してARの新しいビューを作成します。
これで、既存のアプリにARエクスペリエンスを追加するために必要なすべてのコードが完成しました。
Reality Composerを使って自分のARシーンを作成する楽しい部分に進みましょう。
私は自分の空のRealityプロジェクトを開き、ハワイモデルのカスタムUSTZをロードすることから始めます。
甘い。
次にヘリコプターツアーの始まりを迎えたいと思います。
そのために、私はReality Composerの組み込みコンテンツライブラリを使用することができます。これは開発者に何百というプログレードの3Dコンテンツを提供します。
単純な球を使います。
別の素材を適用することで、コンテンツの外観を変えることができます。
ご覧のとおり、Reality Composerを使用すると、3Dでコンテンツを配置するのは非常に簡単で直感的です。
ここで他にできることを見てみましょう。
シーンの開始時にシーンにクールなフェード効果を追加してはどうですか。
これは、ビヘイビアーパネルを開き、シーンの開始時にトリガーされるカスタムビヘイビアーを作成することで実現できます。
最初にシーン内のすべてのコンテンツを非表示にするアクションを追加します。
その後、シーンが開始してから、一定の時間が経過するとすべてのコンテンツが表示されるようにするためのアクションを追加します。
ここでプレビューしてはどうですか。
驚くばかり。
Mac上でARを開発することは便利ですが、現実の世界に置かれたときにコンテンツの規模と外観を推測するという課題があります。
そのため、MacOS用、iPadOS、iOS用のReality Composerを作成して、推測から開発を除外しました。
だから私はこれをJeffに渡して、これまでにiPadで何をしてきたのかを確かめる。
>>どうもありがとう、Shrudi。
だから、これはiPad用のReality Composerです。
それはあなたがMac用のリアリティ作曲家で見るのと同じ素晴らしい機能を持っています。
そして私達はShrudiが引き渡したという見方を取り、私達の最終的なアートワークでそれを完成させることができます。
そこで、私たちはAdobe Arrowを使って最終的なファイルまたは最終的なアートワークを作成したので、それをシーンに入れます。
だから私はShrudiが持っていたプロキシアートを取るつもりです。
私たちの新しいアートワークでそれを置き換えるつもりです。
それが正しいことかどうか確認してみましょう。
素晴らしいです。
それが私たちの最後のヘリコプターです。
それに伴うアニメーションも持ち込みたいです。
とても簡単です。
覚えているのであれば、彼女はその振る舞いを作成したので、その振る舞いを見ていきますそして私たちがやろうとしているのは、追加のアクションを追加することだけです。
それで私達はファイルと一緒に行ったアニメーションを持ち込んでいるUSDZアニメーションを探します。
素晴らしいです。
いいね。
それをプレビューしましょう。
すばらしいです。
だから私たちの行動タブを非表示にします。
それは私たちが欲しいもののように見えます。
完璧です。
これをARでプレビューしましょうが、iPadでもできます。
ワオ。
もう一度試してみましょう。
素晴らしいです。
それこそまさに私が望んでいたものです。
そしてそれをプレイすることもできます。
完璧です。
島を巡るヘリコプターのアニメーションがあります。
それは私たちの旅行アプリケーションではとてもよく似合うでしょう。
iPad用のReality Composerです。
そして、Reality Composerを使用して、macOS、iPadOS、およびiOSの間で同じように優れた使いやすさとシームレスなエクスペリエンスを実現する方法を気に入るはずです。
【拍手】
今RealityKit。
RealityKitは拡張現実感レンダリングとシミュレーションのためにゼロから設計された現代の高性能3Dエンジンです。
フレームワークとして提供されているため、2Dアプリケーションを3Dに拡張して拡張することは、すべての人にとって非常に簡単です。
RealityKitは現代の視覚ベースのレンダリングとマテリアルを使います。
これは、データ駆動型レンダリングシステムであり、アップルのGPU向けに最適化された完全マルチスレッドレンダラです。
また、非常に重要なこととして、AR Kitのシーン理解をRealityKitに統合しました。
つまり、AR Kitは環境についてより学習しやすいので、これを仮想シーンに自動的に同期させます。
今朝RealityKitが動作しているのを見ました。
詳しく見てみましょう。
実際に何が起こっているのか見てみましょう。
現実は、イメージベースのライティング、モーションブラー、被写界深度やカメラノイズなどのカメラエフェクトなど、現実と仮想の境界線をぼやけさせるものに基づいています。
そして、あなたは自動的にRealityKitでこれらの機能を手に入れます。
あなたはネイティブSwift APIである新しいフレームワークを通してRealityKitにアクセスします。
Swiftの重要な機能の多くの利点を活かして、明確でコンパクトなコードを書くことができます。
コンセプトLogとRallyは直接統合されています。
たとえば、ARアセットをロードしてそれらを直接アンカーに添付するのは簡単です。
プロトコル拡張はエンティティプロパティへの簡単なアクセスを提供し、この場合はライトや影などのコンポーネントにすばやくアクセスでき、実行時チェックの必要性を減らすことができます。
これはまた、あなたが強く型付けされた方法でエンティティを扱うことができるということを意味します。
ここでは、物理学に参加している実体に角力を加えています。
そして、それがこのシーンに必要なすべてのコードです。
最後になりましたが、今日では拡張現実フレームワークAR Kit 3の新しいバージョンがあります。
私達は世界で最も有能なARプラットフォームを採用し、新しい詳細なリバース機能でそれをさらに強力にしました。
AR Kitを導入して以来、フロントカメラとバックカメラを同時に使用できるようにすることを多くの開発者に求めてきました。
AR Kit 3では可能です。
それであなたはできる - それは正しい、両方のカメラを同時に。
【拍手】
これにより、フェイストラッキングを使用して拡張現実感を直接体験できます。
そして今朝Craigが話したように、ARシーンで人々を適切に隠蔽することは非常に難しい問題です。
誰かが仮想オブジェクトの前を歩くたびに見えます。
これを解決するために、どのピクセルが人物であるか、シーン内のその人物の奥行きを把握し、その情報を使用して仮想オブジェクト内にシーンを適切にレンダリングできるようにする高度な機械学習アルゴリズムを構築しました。
人々の閉塞により、今朝見たMinecraft Earth Demoのようなまったく新しい体験が可能になります。
【拍手】
本当にすごい。
そして最後に、人間が仮想コンテンツと対話できるようにするシステムを構築しました。
AR Kit 3は、iPadまたはiPhoneの1台のRGBカメラで、人の動きをリアルタイムで捉えることができます。
私達はまた機械学習されたアルゴリズムを使って人を追跡し、二次元の棒の形を​​作り、その形を取ってそれからそれらから三次元の動きを推論するかそれを三次元に持ち上げる。
開発者は、2Dスケルトンと3Dスケルトンの両方を利用できます。
3Dは90以上の関節ジョイントを持ち、フェイスキットと同じ使いやすさを提供します。
それで、それらは私たちの新しい技術です。
AR Kit 3、RealityKit、およびReality Composerは、誰もが誰でも簡単に素晴らしいARエクスペリエンスを構築するためのツールおよびフレームワークです。
そして、今日は楽しいことをしたいので、カンファレンスで楽しい新しいアプリケーションを用意しました。
あなたはそれを見たことがあるでしょう、SwiftStrike。
私達は今日利用可能な開発者サンプルとしてこれの卓上版を作っています。
それはRealityKit、ARキット3とReality Composerを使い、あなたのアプリケーションのための素晴らしい出発点を提供します。
[音楽]
たくさんの楽しみ。
【拍手】
ありがとうございました。
【拍手】
そしてもちろん、MetalはARで私たちのデバイスで行うことの多くを強化します。
それでは、Metalの新機能について詳しくお伝えするために、Jeremyをステージに迎え入れたいと思います。
【拍手】
>>ありがとう、ジェフ。
だからMetalはグラフィックと計算のためのアップルの現代の高性能GPUプログラミングAPIです。
初心者にもエキスパートにも、非常に使いやすいです。
そしてそれは驚くべきパフォーマンスの向上をもたらし、OpenGLよりも最大100倍多くの描画呼び出しをサポートし、そして全く新しい世代の高度なグラフィックパフォーマンスを可能にします。
これは、MetalがApple製品の中核をなすGPUを直接制御するためです。
そしてこれらのGPUは、iPhoneからiPad、まったく新しいMac Proまで、14億以上のメタル対応システムに電力を供給しています。
事実、Appleのすべてのプラットフォームは現在Metalで動作しています。
私達の滑らかなユーザーインターフェースからRealityKitの最新3Dレンダリング、そして私達の高度なカメラ処理パイプラインまで、私達は至る所でMetalを使用しています。
そしてあなたもできます。
そのために、今年は3つの重要分野に焦点を当てました。
私たちはMetalをさらに使いやすくしました。
私たちはまったく新しいレベルの高性能GPUコンピューティングを可能にしました。
そして最も要求の厳しいプロアプリ開発者と顧客のためにMetalを強化しました。
まず、Metalの信じられないほど親しみやすいAPIとGPUシェーディング言語を使えば、GPUのデバッグ、プロファイリング、パフォーマンスの最適化のための強力な開発者ツール一式を始めることができます。
そして私達はそれらのツールをさらに良くしました。
XcodeのiOSシミュレータに完全なMetalサポートを追加しました。
【拍手】
私たちはあなたがそれに興奮してうれしいです。
私たちもそれにとても興奮しています。
シミュレータでMetalを直接使用できるようになりました。UIキット、Maps、およびMetal上に構築されたすべてのシステムフレームワークを使用すると、パフォーマンスが大幅に向上します。
そしてこれは、iOSシミュレータが現在Macに組み込まれているネイティブのMetalサポートを使用しているためです。
また、まったく新しいMetalメモリデバッガも追加しました。
これで、アプリがMetalテクスチャ、バッファ、ヒート用に使用しているメモリ量を正確に特定でき、ゲームやアプリを最適化して、さらに高度なグラフィック用にすべての最後のバイトを使用できるようになります。
ここ数年で、Metalは、すべての主要GPUベンダーからの独自のハードウェアと、すべてのプラットフォームおよびOSリリースにわたって、数十のGPUの高度な機能をサポートするようになりました。
そして開発者として、以前はこれらのさまざまなハードウェア機能セットの複雑さをすべて自分で管理する必要がありました。
今年はたった3つのMetal GPUファミリで、はるかにシンプルになりました。
Metal共通GPUファミリー。当社のすべてのプラットフォームで使用できるMetal機能の大多数を識別します。
Apple Design GPUと、iOS、iPadOS、およびtvOS製品の高度な独自機能を備えた2番目のファミリー。
そして私達のMacシステム上の強力なGPUのための第三のファミリーです。
そしてそれはあなたのアプリをiOSからmacOSへ、あるいはその逆にすることをとても簡単にします。
これで、没入型ゲームと高度なグラフィックスを可能にすることに加えて、MetalはあなたのアプリにGPUを利用して計算する能力も与えます。
それではGPUは何を計算するのですか？
さて、GPUは元々、複雑な数学的計算の実行を必要とする大量のピクセルを超並列的に処理するように設計されていました。
そして、その計算能力を従来のグラフィック以外にもさまざまなタスクに適用できることがわかりました。
そのため、MetalはGPUでの汎用計算に必要なすべての構成要素を提供します。
おなじみのC ++ベースのGPUプログラミング言語、計算コマンドのエンコード、APIとランタイム、フル機能のコンパイラとデバッガ、そしてMetalパフォーマンスシェーダと呼ばれる豊富なシェーダとカーネルのライブラリ。
このMPSライブラリは、これらすべてのGPUおよびすべてのAppleシステム用に事前に最適化された貴重な計算機能を提供し、すべてがMetalコードに完全に統合されています。
また、Apple Design GPUでは、Metalはタイルシェーディングなどの高度なコンピューティング機能も提供します。これにより、コンピューティングシェーダとフラグメント処理を1つのシンプルで非常に効率的なレンダリングパスに組み合わせることができます。
そして今年はMetalの間接計算コマンドのエンコーディングも紹介します。
それはあなたがGPU自体の上にあなたのGPU計算コマンドを構築することを可能にし、計算効率のための全く新しいアルゴリズムのロックを解除しそしてあなたのアプリの他の活動のためにCPUを解放します。
そして、Radeon Pro Vega IIを搭載した新しいMac Proは、最大56テラフロップのGPUコンピュートをすべてMetalで利用できるGPUコンピュートモンスターです。
これでたくさんのフロップができました。
つまり、それらすべてを見てください。
彼らはほとんど画面に収まりません。
【拍手】
それは沢山。
【拍手】
それで、あなたはGPUコンピューティングのこれらのすべてのフロップで何ができるでしょうか？
さて、Metalを使えば、それらを高度な計算処理に使うことができます。
ビデオの場合は、写真の品質を向上させることができます。
あなたはあなたのMLモデルを訓練することができ、あなたは対話型レイトレーシングを加速するためにそれらを使うことができます。
そこで、今年はレイトレーシングのMetalサポートをさらに改善し、バウンディングボリューム階層構造をCPUからGPUに移動することで動的シーンを可能にし、さらに画質をさらに向上させるためにまったく新しい最適化MPSノイズ除去フィルタを追加しました。
レイトレーシングは、GPUを使用してライトやサーフェスの物理的特性や反射を計算でモデル化します。非常に複雑になる可能性があるため、このトピックでは実際に博士号を取得しています。
そこで、レイトレーシングにMetalとGPU Computeを使用する方法を説明するために、非常に単純な例をまとめることにしました。
そして私は今すぐRavをステージに招待してあなたに素早いデモンストレーションをしたいと思います。
ラヴ？
【拍手】
>>ありがとう、ジェレミー。
そこで、強力な新しいMac ProでMetal Computeで何ができるかを確認するために、プロトタイプのハイブリッドレイトレーシングエンジンを構築しました。
今、私たちが建てたこのおもちゃの街はシンプルに見えますが、4Kの解像度で毎秒10億以上の光線を処理するためにMetalを使っています。
ここで何をしているのかを説明しましょう。
そのため、後で使用するジオメトリとマテリアル情報をレンダリングするためにMetal drawコマンドを使用して開始し、次にMetal ComputeとMPSレイトライアングル交差APIの使用に切り替えて、すべての面倒な作業を行います。
この画像からわかるように、これにはすべてのサーフェスポイントでの周囲光の計算が含まれます。
しかしまた、光線の深さを増やしながらシーン内のオブジェクト間の光の跳ね返りをシミュレートして、影、反射、さらにはそれらの反射内の反射を生成することもできます。
そして、この本当に高品質の画像を生成するために、新しいMPSノイズ除去器で最適化されたMPSまたは最適化された計算カーネルを使用することで終わります。
そのため、従来のCPUレンダラーは、このようなフレームを生成するのに1分以上かかります。
Metalを使用すると、これを30ミリ秒未満に減らすことができました。これは、1,000倍も速いことです。
だからプロアプリ開発者 - ありがとう。
私達はそれもかなり素晴らしいと思います。
【拍手】
そのため、プロアプリの開発者は、Metal Computeを使用して、建物やその火災避難場所で発生する劇的な影のような物理的に正確な照明効果を視覚化するための新しいインタラクティブツールを構築できます。
あるいは、この屋根にここをパンすると、緑色の光がこの隣接する建物に当たる現実的な方法です。
それはちょうどいいですね。
ありがとうございました。
【拍手】
このバスの風防ガラスで見ることができるように私達が模倣するか、またはモデル化できるもう一つの大きい効果は正確な反射である。
実際、太陽の位置を変えると、そのフロントガラスやその反射の中で影が動くのがわかります。
それで、それは素晴らしく見えます、しかし、光線追跡場面でオブジェクトをアニメートすることは非常に計算上高価であるかもしれません、なぜなら我々は幾何学に関連する境界ボリューム階層を更新しなければならないからです。
幸い、Metal ComputeとMPS APIを使用して、これらすべての作業をGPUに移行し、この素晴らしいアニメーションを実現できます。
そして私たちの電車があります。
したがって、これは、新しいMac ProでMetal Computeを使用して光線追跡を高速化した場合に可能になることのほんの一例です。
それは獣です。
ありがとうございました。
あなたに戻って、ジェレミー。
【拍手】
>>ありがとう、ラヴ。
だから私たちはほんの少しの間にやったことです。
しかし、高性能レイトレーシングは、当社の最も専門的なサードパーティ開発者の手によってさらに強力になる可能性があります。
そのため、OTOYが、Metal Computeを使用して、Octane Rendererのまったく新しいバージョンであるOctaneX、MetalおよびAppleプラットフォーム用に最適化されたインタラクティブパストレースエンジンを構築することを発表したことを非常に興奮しています。
そして私たちは、Metalに最適化された全く新しいバージョンと新しいMac Proを使って、彼らのパワフルなGPUアクセラレーテッドレンダラRedshiftをMacにもたらしているMaxonと協力することに非常にワクワクしています。
そのため、高度なMetal Compute APIと非常に強力なハードウェアを使用して、最先端のプロフェッショナル向けコンテンツ作成ツールを強化するためにMetalを構築しました。
そして私たちは、これらのプロフェッショナル向けコンテンツ作成ツールとアプリケーションの今後のバージョンが、MetalとAppleのプラットフォーム用に完全に最適化されることを発表した一流のアプリ開発者と本当に緊密に協力してきました。
たとえば、Serifは、MetalのグラフィックとCompute APIを使用して、驚くほどのパフォーマンス向上を達成するために高度な写真処理エンジンを過給する、まったく新しいバージョンのAffinity Photo for Macを発表しました。
新しいMac Proに複数のGPUを搭載したMetalを使用すると、10倍以上のパフォーマンスと50倍のパフォーマンスの向上が見られます。
そのため、この種のプロアプリとこの種のパフォーマンスを実現するために、当社はGPUハードウェアおよびソフトウェアパートナーチームと緊密に連携して、まったく新しい機能をMetalに追加しています。
新しいMac Proで新しいAMD Infinity Fabricリンクをサポートするために、Metal Peer Group APIを追加しました。
それで、これは何をしますか？
さて、以前は複数のGPUでワークロードを共有していたため、大量のデータをPCIバスを介して1往復で移動する必要がありました。
しかし、Metal Peer Group APIを使用すると、アプリケーションは複数のGPUをはるかに効率的に使用して、Infinity Fabricリンクを介してデータを直接共有することができます。
最後に、Metal Computeと新しいMac Proを使用して、はるかに多くのピクセルを処理する方法を説明しました。
しかし私達はまたあなたにさらにもっと美しいピクセルを作り出してほしいです。
そこで私たちは、macOSでまったく新しいHDRソフトウェアをサポートしたゴージャスな新しいPro Display XDRを紹介しました。
AV Foundation APIを使用してHDRビデオをデコードすることも、ネイティブのHDRコンテンツをMetalで直接レンダリングすることもできます。
あなたはHDRディスプレイトーンマッピングをあなた自身で管理することができますか、またはあなたはウィンドウシステムと私達の高度なディスプレイシステムソフトウェアがあなたのためにそれをすべて扱うようにすることができます。
また、これらの同じAPIを使用して、既存のMacディスプレイの多くではるかに広い範囲の明るさレベルにもアクセスできます。
これが今日のMetalアップデートです。
iOSシミュレータのMetalと単純化されたGPUファミリを使用すると、すべてのプラットフォームでMetalを使用することがさらに簡単になります。
私たちはまったく新しい機能と強力なハードウェアを使って、まったく新しいレベルのGPUコンピューティング性能を発揮します。
そして、私たちはMetalを、最新のプロフェッショナルコンテンツ作成ツールとアプリケーションを動かすための最高のGPUプログラミングAPIであるように構築しました。
どうもありがとうございました。
私は今それをSebastienに渡します。
ありがとうございました。
【拍手】
>>ありがとう、ジェレミー。
あなたはメタルが好きではありませんか？
あなたはメタルの力が好きではありませんか？
本当にすごいね。
今日の午後に見たのは、開発者としてあなた全員にとって新しい大量の新技術です。
開発者向けツール、アップルのプラットフォーム、そしてコアテクノロジーをカバーしているのは、ほんの一部のハイライトです。
私たちは実際に今週あなたに見せるためにそんなにたくさんあります。
そして私たちの前には109の異なるセッションがあります。
そして、それはすべてを網羅するのに十分ではなかったことがわかりました。
そこで今年はさらに27回のビデオのみのセッションを追加しました。
さらに深く掘り下げたいときは、週に229回の異なるラボセッションで、ここにいる1000人以上のアップルエンジニアと一緒に座ることができます。
だからそこに出て、あなたの心を爆破させる準備をしてください。
それは素晴らしい週になるだろう。
ありがとうございました。
【拍手】